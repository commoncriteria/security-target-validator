<?xml version="1.0" encoding="UTF-8"?>

<!-- Grab all the selectablel sizes -->
<!-- -->


<st xmlns="https://niap-ccevs.org/cc/v1"
    xmlns:h="http://www.w3.org/1999/xhtml"
    xmlns:sec="https://niap-ccevs.org/cc/v1/section"
    >
  <module>
    <git>
      <url>https://github.com/commoncriteria/webbrowser</url>
      <branch>master</branch>
      <commit>95df65c573e71688ee1f2ea6b779204804c58e8d</commit>
    </git>
            <modified-sfrs>
                        <f-component cc-id="fpt_aon_ext.2" name="Trusted Installation and Update for Add-ons">
                            <depends on="addons_supported"></depends>
                            <consistency-rationale>This SFR defines how web browsers verify add-ons. It does not impact functionality described by the App PP.</consistency-rationale>
                            
                            <comp-lev> requires the TSF to implement a method to verify the integrity of add-ons and ensure that untrusted or unknown add-ons are not loaded for use.</comp-lev>
                            <management>No specific management functions are identified.</management>
                            <audit>There are no auditable events foreseen.</audit>
                            <dependencies>
                                <no-link>FCS_COP.1</no-link> Cryptographic Operation<h:p/>
                                <no-link>FPT_AON_EXT.1</no-link> Support for Only Trusted Add-Ons
                            </dependencies>
                            
                            <f-element>
                                <!-- <selection-depends req="FPT_AON_EXT.1.1"/>  -->
                                <title>The TSF shall <selectables>
                                    <selectable>provide the ability</selectable>
                                    <selectable>leverage the platform</selectable>
                                </selectables> to provide a means to cryptographically verify add-ons
                                    using a digital signature mechanism and <selectables onlyone="yes">
                                        <selectable>no other functions</selectable>
                                    </selectables> prior to installation and update. </title>
                            </f-element>
                            <f-element>
                                <!-- <selection-depends req="FPT_AON_EXT.1.1"/>  -->
                                <title>The TSF shall <selectables>
				<selectable>provide the ability</selectable>
				<selectable>leverage the platform</selectable>
				</selectables> to query the current version
                                of the add-on.</title>
                            </f-element>
                            <f-element>
                          <!--       <selection-depends req="FPT_AON_EXT.1.1"/>  -->
                                <title>The TSF shall prevent the automatic installation of
                                    add-ons.</title>
                                <note role="application">This selection-based SFR is claimed when <xref to="addons_supported"/> is selected in FPT_AON_EXT.1.1.</note>
                                <aactivity>
                                    <TSS>The evaluator shall examine the TSS to verify
                                        that it states that the browser will reject add-ons from untrusted
                                        sources. <h:p/></TSS>
                                    <Guidance>The evaluator shall examine the operational guidance to verify
                                        that it includes instructions on how to configure the browser with
                                        trusted add-on sources. <h:p/></Guidance>
                                    <Tests>The evaluator shall perform the following tests: <testlist>
                                        <test>The evaluator shall create or obtain an add-on signed by a
                                            trusted source and attempt to install it. The evaluator
                                            shall verify that the signature on the add-on is valid and
                                            that the add-on can be installed.</test>
                                        <test>The evaluator shall create or obtain an add-on signed with
                                            an invalid certificate and attempt to install it. The
                                            evaluator shall verify that the signed add-on is rejected
                                            and cannot be installed.</test>
                                        <test>The evaluator shall create or obtain an add-on signed by a
                                            trusted source, modify the add-on without re-signing it, and
                                            attempt to install it. The evaluator shall verify that the
                                            signed add-on is rejected and cannot be installed.</test>
                                    </testlist>
                                    </Tests>
                                </aactivity>
                            </f-element>
                        </f-component>                
                <sec:mod_fcs title="Cryptographic Support (FCS)">
                    <f-component cc-id="fcs_ckm_ext.1" name="Cryptographic Key Generation Services">
                      <consistency-rationale>
			This SFR is changed from its definition in the App PP to remove one of the available selection options because
			it will never apply in the case where the TOE conforms to this PP-Module.
		      </consistency-rationale>
                        <f-element>
                            <title>The application shall <selectables linebreak="yes">
                                
                                <selectable id="sel_invoke_genkey">invoke platform-provided functionality for asymmetric key generation</selectable>
                                <selectable id="sel_impl_genkey">implement asymmetric key generation</selectable>
                            </selectables>.
                            </title>
                            <note role="application">This SFR is modified from its Base-PP definition to remove the selection for the TOE not requiring asymmetric key generation.
                            </note>
                            <aactivity>
                                <no-tests>
                                    There is no change to the Base-PP EAs for this SFR when this PP-Module is claimed, aside from the fact that the materials for the selections that have been refined out of this SFR are not applicable.<h:p/>
                                </no-tests>
                            </aactivity>
                        </f-element>
                    </f-component>
                    
                    <f-component cc-id="fcs_https_ext.1" iteration="Client" name="HTTPS Protocol">
                      <consistency-rationale>
			This SFR is unchanged from its definition in the App PP;
			the SFR is recategorized from selection-based to mandatory
			when the TOE conforms to this PP-Module.
		      </consistency-rationale>
		      <description>
			This SFR is selection-based in the App PP.
			<replace><depends/></replace> because of the modifications that this PP-Module makes to FTP_DIT_EXT.1.
		      </description>
                    </f-component>
                    
                    <f-component cc-id="fcs_rbg_ext.1" name="Random Bit Generation Services">
                        <consistency-rationale>This SFR is changed from its definition in the App PP to remove one of the available selection options because it will never apply in the case where the TOE conforms to this PP-Module.</consistency-rationale>
                        <f-element>
                            <title> The application shall
                                <selectables linebreak="yes">
                                    <selectable>invoke platform-provided DRBG functionality</selectable>
                                    <selectable id="drbg">implement DRBG functionality</selectable>
                                </selectables> for its cryptographic operations. </title>
                            <note role="application">This SFR is modified from its Base-PP definition to remove the selection for the TOE using no DRBG functionality.
                            </note>
                            <aactivity>
                                <no-tests>
                                    There is no change to the Base-PP EAs for this SFR when this PP-Module is claimed, aside from the fact that the materials for the selections that have been refined out of this SFR are not applicable.<h:p/>
                                </no-tests>
                            </aactivity>
                        </f-element>
                    </f-component>
                    
                </sec:mod_fcs> 
                
                <sec:mod_fia title="Identification and Authentication (FIA)">
                    <f-component cc-id="fia_x509_ext.1" name="X.509 Certificate Validation">
                      <consistency-rationale>
			This SFR is unchanged from its definition in the App PP;
			the SFR is recategorized from selection-based to mandatory when the TOE conforms to this PP-Module.
		      </consistency-rationale>
		      <description>
			This SFR is selection-based in the App PP.
			<replace><depends/></replace> because of the modifications that this PP-Module makes to FTP_DIT_EXT.1.
		      </description>
                        <!-- <f-element> -->
                        <!--     <title>This SFR is selection-based in the App PP. When the TOE conforms to this PP-Module, it is mandatory because of the modifications that this PP-Module makes to FTP_DIT_EXT.1. -->
                        <!--     </title> -->
                        <!--     <aactivity> -->
                        <!--         <no-tests> -->
                        <!--             There is no change to the Base-PP EAs for this SFR when this PP-Module is claimed.<h:p/>  -->
                        <!--         </no-tests> -->
                        <!--     </aactivity> -->
                        <!-- </f-element> -->
                    </f-component>
                    <f-component cc-id="fia_x509_ext.2" name="X.509 Certificate Authentication">
                      <consistency-rationale>
			This SFR is unchanged from its definition in the App PP;
			the SFR is recategorized from selection-based to mandatory when the TOE conforms to this PP-Module.
		      </consistency-rationale>
		      <description>
			This SFR is selection-based in the App PP.
			<replace><depends/></replace> because of the modifications that this PP-Module makes to FTP_DIT_EXT.1.
		      </description>


		      <!-- <f-element> -->
                      <!--       <title>This SFR is selection-based in the App PP. When the TOE conforms to this PP-Module, it is mandatory because of the modifications that this PP-Module makes to FTP_DIT_EXT.1. -->
                      <!--       </title> -->
                      <!--       <aactivity> -->
                      <!--           <no-tests> -->
                      <!--               There is no change to the Base-PP EAs for this SFR when this PP-Module is claimed.<h:p/>  -->
                      <!--           </no-tests> -->
                      <!--       </aactivity> -->
                      <!--   </f-element> -->
                    </f-component>
                </sec:mod_fia> 
                
                <sec:mod_ftp title="Trusted Path/Channels (FTP)">
                    <f-component cc-id="ftp_dit_ext.1" name="Protection of Data in Transit">
                        <consistency-rationale>This SFR is changed from its definition in the App PP to mandate the protection of sensitive data using only specified protocols.</consistency-rationale>
                        <f-element>
                            <title>The application shall <selectables>
                                <selectable>encrypt all transmitted [sensitive data] with [HTTPS in accordance with FCS_HTTPS_EXT.1<h:b>/Client</h:b>, TLS as a client as defined in the TLS Package, DTLS as a client as defined in the TLS Package]</selectable>
                                <selectable>invoke platform-provided functionality to encrypt all transmitted sensitive data with [HTTPS, TLS, DTLS]</selectable>
                            </selectables>
                                between itself and another trusted IT product.
                            </title>
                            <note role="application">This SFR is modified from its definition in the App PP to require that the TOE or its platform supports HTTPS, TLS, and DTLS and that its use of these protocols is only limited to sensitive data. 
                                A conformant TOE must support the use of HTTPS, TLS, and DTLS for secure web browsing but is permitted to interact with non-sensitive content over an untrusted channel.<h:p/>
                                Either the TOE or its platform is permitted to implement TLS and DTLS. If the TOE implements these protocols, FCS_DTLSC_EXT.1, FCS_DTLSC_EXT.2, FCS_TLS_EXT.1, FCS_TLSC_EXT.1, and FCS_TLSC_EXT.2 from the TLS package must be claimed at minimum
                                because a web browser is required to support mutually-authenticated TLS and DTLS.</note>
                            <aactivity>
                                <no-tests>
                                    There is no change to the Base-PP EAs for this SFR when this PP-Module is claimed, aside from the fact that the materials for the selections that have been refined out of this SFR are not applicable.<h:p/> 
                                </no-tests>
                            </aactivity>
                        </f-element>
                    </f-component>
                    
                </sec:mod_ftp> 
                
            </modified-sfrs>
        <man-sfrs>
            <sec:man_fdp title="User Data Protection (FDP)">
                <ext-comp-def fam-id="FDP_ACF_EXT" title="Access Control Functions">
                    <fam-behavior>Components in this family define requirements for data access control beyond those which are specified in the Part 2 family FDP_ACF.
                    </fam-behavior>
                </ext-comp-def>
                <f-component cc-id="fdp_acf_ext.1" name="Local and Session Storage Separation">
                    <consistency-rationale>This SFR defines domain separation of web content when a web browser is simultaneously accessing
                        content from multiple sources. It does not impact the App PP functionality.</consistency-rationale>
                    
                    <comp-lev> requires the TSF to enforce data protection mechanisms such that user data is only accessible from its originator.</comp-lev>
                    <management>No specific management functions are identified.</management>
                    <audit>There are no auditable events foreseen.</audit>
                    <dependencies>
                        No dependencies.
                    </dependencies>
                    
                    <f-element>
                        <title>The TSF shall separate local (permanent) and session (ephemeral)
                            storage based on domain, protocol, and port:<h:p/>
                            <h:ul>
                                <h:li>Session storage shall be accessible only from the originating
                                    window/tab;</h:li>
                                <h:li>Local storage shall only be accessible from windows/tabs running
                                    the same web application.</h:li>
                            </h:ul></title>
                        <note role="application"> The separation of local and session storage is
                            described in World Wide Web Consortium (W3C) Proposed Recommendation:
                            "Web Storage."<h:p/>
                        </note>
                        <aactivity>
                            <TSS>The evaluator shall examine the TSS to ensure it
                                describes how the browser separates local and session storage. <h:p/></TSS>
                            <Guidance>The evaluator shall examine the operational guidance to verify
                                that it documents the location on the file system that will be used
                                for local storage and the location used for session storage. <h:p/></Guidance>
                            <Tests>The evaluator shall obtain or create JavaScript-­based scripts that store and retrieve information from local and session storage. 
                                The evaluator shall set up a web server with two or more web pages from different domains 
                                (e.g., test1.example.com and test2.example.com) with at least one of the domains served from multiple ports (e.g., port 80 and port 443). 
                                The evaluator shall incorporate the scripts into the web pages. The web pages will be opened in a manner that creates a relationship 
                                allowing for a JavaScript object handle to refer from one window to the the other (e.g., window.parent, window.opener, etc). 
                                The evaluator shall perform the following tests: <testlist>
                                    <test>The evaluator shall open both pages ensuring that they are loaded from the same domain using the same port. 
                                        The evaluator shall verify that the script is unable to access session storage through a window relationship handle (e.g., window.opener.sessionStorage).</test>
                                    <test>The evaluator shall open both pages ensuring that they are loaded from different domains. 
                                        The evaluator shall verify that the script is unable to access session storage through a window relationship handle (e.g., window.opener.sessionStorage).</test>
                                    <test>
                                        The evaluator shall open both pages ensuring that they are loaded from the same domain using different ports. 
                                        The evaluator shall verify that the script is unable to access session storage through a window relationship handle (e.g., window.opener.sessionStorage).
                                    </test>
                                </testlist>
                            </Tests>
                        </aactivity>
                    </f-element>
                </f-component>
                <ext-comp-def fam-id="FDP_COO_EXT" title="Cookie Blocking">
                    <fam-behavior>Components in this family define requirements for controlling whether or not the TOE stores third-party cookie data.
                    </fam-behavior>
                </ext-comp-def>
                <f-component cc-id="fdp_coo_ext.1" name="Cookie Blocking">
                    <consistency-rationale>This SFR defines behavior for handling cookies, which are data specific to web browser applications. It does not impact the App PP functionality.</consistency-rationale>
                    
                    <comp-lev> requires the TSF to have a configurable mechanism for blocking the storage of third-party cookies.</comp-lev>
                    <management>The following actions could be considered for the management functions in FMT: <h:ul>
                        <h:li>Enable/disable storage of third-party cookies.</h:li>
                    </h:ul>
                    </management>
                    <audit>There are no auditable events foreseen.</audit>
                    <dependencies>
                        No dependencies.
                    </dependencies>
                    
                    <f-element>
                        <title>The TSF shall provide the capability to block the storage of
                            third-party cookies by websites.</title>
                        <aactivity>
                            <TSS>The evaluator shall examine the TSS to ensure it
                                describes how the browser blocks third-party cookies and when the
                                blocking occurs (e.g., automatically, when blocking is enabled). <h:p/></TSS>
                            <Guidance>The evaluator shall examine the operational guidance to verify
                                that it provides a description of the configuration option for
                                blocking of third-party cookies. <h:p/></Guidance>
                            <Tests> The evaluator shall perform the following tests that may
                                require the developer to provide access to a test platform that
                                provides the evaluator with tools that are typically not found on
                                factory products: <testlist>
                                    <test>The evaluator shall clear all cookies and then configure
                                        the browser so that storage of third-party cookies is
                                        allowed. The evaluator shall load a web page that stores a
                                        third-party cookie. The evaluator shall navigate to the
                                        location where cookies are stored and shall verify that the
                                        cookie is present.</test>
                                    <test>The evaluator shall clear all cookies and then configure
                                        the browser so that storage of third-party cookies is
                                        blocked (i.e. not allowed). The evaluator shall load a web
                                        page that attempts to store a third-party cookie and shall
                                        verify that the cookie was not stored.</test>
                                </testlist>
                            </Tests>
                        </aactivity>
                    </f-element>
                </f-component>
 
                <ext-comp-def fam-id="FDP_SBX_EXT" title="Sandboxing">
                    <fam-behavior>Components in this family define requirements for ensuring domain separation through sandboxing.
                    </fam-behavior>
                </ext-comp-def>
                <f-component cc-id="fdp_sbx_ext.1" name="Sandboxing of Rendering Processes">
                    <consistency-rationale>This SFR defines behavior for rendering of web pages, which is by definition functionality that is associated with web browser applications. It does not impact the App PP functionality.</consistency-rationale>
                    
                    <comp-lev> requires the TSF to implement sandboxing of rendering processes such that least privilege is enforced on the rendering process.</comp-lev>
                    <management>No specific management functions are identified.</management>
                    <audit>There are no auditable events foreseen.</audit>
                    <dependencies>
                        No dependencies.
                    </dependencies>
                    
                    <f-element>
                        <title>The TSF shall ensure that web page rendering is performed in a
                            process that is restricted in the following manner: <h:ul>
                                <h:li>The rendering process can only directly access the area of the
                                    file system dedicated to the browser.</h:li>
                                <h:li>The rendering process can only directly invoke inter-process
                                    communication mechanisms with its own browser processes.</h:li>
                                <h:li>The rendering process has reduced privilege with respect to
                                    other browser processes <selectables onlyone="yes">
                                        <selectable>
					  <assignable>
					    other methods by which the
                                            principle of least privilege is implemented for
                                            rendering processes</assignable></selectable>
                                        <selectable>in no other ways</selectable>
                                    </selectables>.</h:li></h:ul>
                        </title>
                        <note role="application"> Web browsers implement a variety of methods to
                            ensure that the process that renders HTML and interprets JavaScript
                            operates in a constrained environment in order to reduce the risk that
                            the rendering process can be corrupted by the HTML or JavaScript it is
                            processing. This component requires the browser to lower the privileges
                            of rendering processes by ensuring that it cannot directly access the
                            file system of the host, and that it cannot use inter-process communication (IPC) mechanisms provided
                            by the host to communicate with non-browser processes on the host.
                            Typically, if a rendering process needs to access a file or communicate
                            with a non-browser process, it must request such access through the
                                TSF (which is allowed by the requirement).<h:p/> In
                            addition to the two required measures, other measures can be implemented
                            depending on the browser and the host platform. These may involve such
                            actions as changing the owner of the rendering process to a
                            low-privileged account or dropping platform-defined privileges in the
                            rendering process. The ST author fills in the
                            additional measures implemented by the browser. </note>
                        <aactivity>
                            <TSS>The evaluator shall examine the TSS to ensure it
                                describes how the rendering of HTML and interpretation of JavaScript
                                is performed by the browser in terms of the platform processes that
                                are involved (with "process" being an active entity that executes
                                code). For the processes that render HTML or interpret JavaScript,
                                the evaluator shall examine the TSS to check that
                                it describes how these processes are prevented from accessing the
                                platform file system. The evaluator shall check the TSS to ensure it describes each platform-provided
                                IPC mechanism, and details for each mechanism how the rendering
                                process is unable to use it to communicate with non-browser
                                processes. The evaluator shall also confirm that the TSS describes how IPC and file system access is
                                enabled (if this capability is implemented); for instance, through a
                                more privileged browser process that does not perform web page
                                rendering. The evaluator shall ensure that these descriptions are
                                present for all platforms claimed in the ST.<h:p/>
                                For each additional mechanism listed in the third bullet of this
                                component by the ST author, the evaluator shall
                                examine the TSS to ensure that: 
                                <h:ul>
                                    <h:li>the mechanisms are described;</h:li>
                                    <h:li>the description of the mechanisms are sufficiently
                                        detailed to determine that it contributes to the principle of least
                                        privilege being implemented in the rendering process; and</h:li>
                                    <h:li>appropriate supporting information is provided in the TSS (or pointers to such information are provided)
                                        that provides context for understanding the claimed least privilege
                                        mechanisms.</h:li>
                                </h:ul>
                                <h:p/></TSS>
                            <Guidance> The evaluator shall examine the operational guidance to
                                determine that it provides a description of the restrictions
                                available on rendering processes. Additionally, if such mechanisms
                                are configurable (for instance, if a user can choose which
                                mechanisms to "turn on"), the evaluator shall examine the
                                operational guidance to ensure that the method for enabling and
                                disabling the mechanisms are provided, and the consequences of such
                                actions are described. <h:p/></Guidance>
                            <!-- <Tests>The following tests require the developer to provide access to a
                                test platform that provides the evaluator with debugging and test
                                tools that are typically not found on consumer platforms. <h:p/>The
                                evaluator shall perform the following tests on each platform claimed
                                in the ST: <testlist>
                                    <test>For each IPC mechanism described in the <abbr
                                            linkend="TSS"/>, the evaluator shall use debugging or
                                        test facilities to introduce code into a rendering process
                                        that attempts to directly communicate with another
                                        non-browser process on the platform, and then direct
                                        execution to it. The evaluator shall ensure that this
                                        attempt fails.</test>
                                    <test>For each mechanism that can be configured or turned on or
                                        off, the evaluator shall perform tests to ensure that the
                                        configuration of the mechanism behaves as specified in the
                                        operational guidance.</test></testlist>
                            </Tests> -->
                            <Tests>The evaluator shall perform the following test on each platform
                                claimed in the ST:<testlist><test>The evaluator
                                        shall execute a form of mobile code within an HTML page that
                                        contains instructions to modify or delete a file from the
                                        file system and verify that the file is not modified or
                                        deleted.</test></testlist></Tests>
                        </aactivity>
                    </f-element>
                </f-component>
                <ext-comp-def fam-id="FDP_SOP_EXT" title="Same Origin Policy">
                    <fam-behavior>Components in this family define requirements for implementation of the Same Origin Policy concept.
                    </fam-behavior>
                </ext-comp-def>
                <f-component cc-id="fdp_sop_ext.1" name="Same Origin Policy">
                    <consistency-rationale>This SFR defines behavior for script execution on web pages, which is by definition functionality that is associated with web browser applications. It does not impact the App PP functionality.</consistency-rationale>
                    
                    <comp-lev> requires the TSF to implement the Same Origin Policy concept for web content.</comp-lev>
                    <management>No specific management functions are identified.</management>
                    <audit>There are no auditable events foreseen.</audit>
                    <dependencies>
                        No dependencies.
                    </dependencies>
                    
                    <f-element>
                        <title>The TSF shall only permit scripts contained in one web page to
                            access data in a second web page if both pages are from the same
                            origin.</title>
                    </f-element>
                    <f-element>
                        <title>The TSF shall enforce the same origin policy for all
                            domains.</title>
                        <note role="application"> The Same Origin Policy concept is described in RFC
                            6454, "The Web Origin Concept."<h:p/> Origin is defined as the
                            combination of domain, protocol, and port. Two URIs sharing the same
                            domain, protocol, and port are considered to have the same origin. </note>
                        <aactivity>
                            <TSS>The evaluator shall examine the TSS to ensure it
                                describes its implementation of a same origin policy and explains
                                how it complies with RFC 6454. If the browser allows the relaxation
                                of the same origin policy for subdomains in different windows/tabs,
                                the TSS shall describe how these exceptions are
                                implemented. <h:p/></TSS>
                            <Guidance>There are no guidance EAs for this component.<h:p/></Guidance>
                            <Tests>The evaluator shall obtain or create scripts that can retrieve
                                content from designated locations and shall set up a web server with
                                two or more web pages representing different domains. The evaluator
                                shall incorporate the scripts into the web pages. The evaluator
                                shall associate each page with a different protocol or port and
                                then perform the following tests: <testlist>
                                    <test>The evaluator shall open two or more browser windows/tabs
                                        and navigate to a different page on the website in each
                                        window/tab. The evaluator shall run the scripts and shall
                                        verify that the script that is running in one window/tab
                                        cannot access content that was retrieved in a different
                                        window/tab.</test>
                                    <test>The evaluator shall verify that the scripts can retrieve
                                        content from another window/tab at a different
                                        subdomain.</test>
                                </testlist>
                            </Tests>
                        </aactivity>
                    </f-element>
                </f-component>
                
                <ext-comp-def fam-id="FDP_STR_EXT" title="Secure Transmission of Cookie Data">
                    <fam-behavior>Components in this family define requirements for using HTTPS to transmit sensitive cookie data.
                    </fam-behavior>
                </ext-comp-def>
                <f-component cc-id="fdp_str_ext.1" name="Secure Transmission of Cookie Data">
                    <consistency-rationale>This SFR defines behavior for handling cookies, which are data specific to web browser applications. It does not impact the App PP functionality.</consistency-rationale>
                    
                    <comp-lev> requires the TSF to use HTTPS to transmit cookie data that has a security-relevant attribute.</comp-lev>
                    <management>No specific management functions are identified.</management>
                    <audit>There are no auditable events foreseen.</audit>
                    <dependencies>
                        <no-link>FCS_HTTPS_EXT.1</no-link> HTTPS Protocol
                    </dependencies>
                    
                    <f-element>
                        <title>The TSF shall ensure that cookies containing the 'secure'
                            attribute in the set-cookie header are sent over HTTPS.</title>
                        <note role="application">The set-cookie header functionality is described in
                            RFC 6265, "HTTP State Management Mechanism."</note>
                        <aactivity>
                            <TSS>The evaluator shall examine the TSS to verify it
                                describes the browser's support for the "secure" attribute of the
                                set-cookie header in accordance with RFC 6265, including the
                                required sending of cookies containing this attribute over HTTPS. <h:p/></TSS>
                            <Guidance>There are no guidance EAs for this component.<h:p/></Guidance>
                            <Tests>The evaluator shall perform the following tests that may require
                                the developer to provide access to a test platform that provides the
                                evaluator with tools that are typically not found on factory
                                products: <testlist>
                                    <test>The evaluator shall connect the browser to a
                                        cookie-enabled test website implementing HTTPS and have the
                                        website present the browser with a "secure" cookie. The
                                        evaluator shall examine the browser's cookie cache and
                                        verify that that it contains the secure cookie.</test>
                                    <test>The evaluator shall reconnect to the cookie-enabled
                                        website over an insecure channel and verify that no "secure"
                                        cookie is sent.</test>
                                </testlist>
                            </Tests>
                        </aactivity>
                    </f-element>
                </f-component>
                <ext-comp-def fam-id="FDP_TRK_EXT" title="Tracking Information Collection">
                    <fam-behavior>Components in this family define requirements for notifying a user when certain data that reflects the usage of the TOE is being tracked.
                    </fam-behavior>
                </ext-comp-def>
                <f-component cc-id="fdp_trk_ext.1" name="Tracking Information Collection">
                    <consistency-rationale>This SFR defines behavior for handling tracking information that is specific to web browser applications. It does not impact the App PP functionality.</consistency-rationale>
                    
                    <comp-lev> requires the TSF to specify the data tracking that results in user notification.</comp-lev>
                    <management>The following actions could be considered for the management functions in FMT: <h:ul>
                        <h:li>Enable/disable ability for websites to collect tracking information about the user.</h:li>
                        <h:li>Enable/disable deletion of stored browsing data.</h:li>
                    </h:ul>
                    </management>
                    <audit>There are no auditable events foreseen.</audit>
                    <dependencies>
                        No dependencies.
                    </dependencies>
                    
                    <f-element>
                        <title>The TSF shall provide notification to the user when tracking
                            information for <selectables linebreak="yes">
                                <selectable>geolocation</selectable>
                                <selectable>browser history</selectable>
                                <selectable>browser preferences</selectable>
                                <selectable>browser statistics</selectable>
                            </selectables> is requested by a website.</title>
                        <ext-comp-def-title>
                            <title>The TSF shall provide notification to the user when tracking
                                information for <assignable>list of trackable browser data</assignable> 
                                is requested by a website.</title>
                        </ext-comp-def-title>
                        <aactivity>
                            <TSS>The evaluator shall examine the TSS to ensure it
                                describes the browser's support for tracking information and
                                specifies the tracking information that the browser allows websites
                                to collect about the browser user. <h:p/></TSS>
                            <Guidance>The evaluator shall examine the operational guidance to ensure
                                it describes any notifications that the user will receive when
                                tracking information is requested by a website and the options that
                                the user has upon receiving the notification. <h:p/></Guidance>
                            <Tests>The evaluator shall perform the following tests for each type of
                                tracking information listed in the TSS: <testlist>
                                    <test>The evaluator shall configure a website that requests the
                                        tracking information about the user and shall navigate to
                                        that website. The evaluator shall verify that the user is
                                        notified about the request for tracking information and
                                        that, upon consent, the web browser retrieves the tracking
                                        information.</test>
                                    <test>The evaluator shall verify that the user is notified about
                                        the request for tracking information and that, when
                                        rejected, the browser does not provide the tracking
                                        information.</test>
                                </testlist>
                            </Tests>
                        </aactivity>
                    </f-element>
                </f-component>
            </sec:man_fdp>
        
   
            <sec:man_fmt title="Security Management (FMT)">
                <ext-comp-def fam-id="FMT_MOF_EXT" title="Management of Functions Behavior">
                    <fam-behavior>Components in this family define requirements for technology-specific management functions that are not enumerated in the Part 2 family FMT_MOF.
                    </fam-behavior>
                </ext-comp-def>
                <f-component cc-id="fmt_mof_ext.1" name="Management of Functions Behavior">
                    <consistency-rationale>This SFR defines a specific set of management functions for a web browser. It does not impact the App PP functionality.</consistency-rationale>
                    
                    <comp-lev> requires the TSF to implement management functions specified in the SFR.</comp-lev>
                    <management>No specific management functions are identified.</management>
                    <audit>There are no auditable events foreseen.</audit>
                    <dependencies>
                        No dependencies.
                    </dependencies>
                    
                    <f-element>
                        <title>The TSF shall be capable of performing the following management
                            functions, controlled by the administrator or user as shown: <h:ul>
                                <h:li>M = Mandatory</h:li>
                                <h:li>O = Optional</h:li></h:ul>
                            <management-function-set default="O">
                                <manager cid='a'>Administrator</manager>
                                <manager cid='u'>User</manager>
                                
                                
                                <management-function><text>Enable/disable storage of third-party
                                    cookies</text>
                                    <O ref="a"/><M ref="u"/>
                                </management-function>
                                
                                
                                
                                <management-function><text>Enable/disable use of OCSP for
                                    obtaining the revocation status of X.509
                                    certificates</text></management-function>
                                <management-function><text>Configure inclusion of user-agent
                                    information in HTTP headers</text></management-function>
                                <management-function><text>Enable/disable ability for websites
                                    to collect tracking information about the user through 
				    <selectables>
                                        <selectable>zombie cookies</selectable>
                                        <selectable>add-on based tracking (e.g. Flash
                                            cookies)</selectable>
                                        <selectable>browsing history</selectable>
                                        <selectable><assignable>other tracking
                                            mechanisms</assignable></selectable></selectables></text>
				</management-function>
                                
                                
                                <management-function><text>Enable/disable deletion of stored
                                    browsing data (cache, web form
                                    information)</text><O ref="a"/><M ref="u"/>
                                </management-function>
                                
                                
                                
                                <management-function><text>Enable/disable storage of sensitive
                                    information (e.g., auto-fill, auto-complete) in persistent
                                    storage</text></management-function>
                                <management-function><text>Configure size of cookie
                                    cache</text></management-function>
                                <management-function><text>Configure size of
                                    cache</text></management-function>
                                <management-function><text>Enable/disable interaction with
                                    Graphic Processing Units (GPUs)</text></management-function>
                                <management-function><text>Configure the ability to advance to a
                                    website with an invalid or unvalidated X.509
                                    certificate</text></management-function>
                                <management-function><text>Enable/disable establishment of a
                                    trusted channel if the browser cannot establish a connection to
                                    determine the validity of a certificate</text></management-function>
                                <management-function><text>Configure the use of an application
                                    reputation service to detect malicious applications prior to
                                    download</text></management-function>
                                <management-function><text>Configure the use of a URL reputation
                                    service to detect sites that contain malware or phishing
                                    content</text></management-function>
                                <management-function><text>Enable/disable automatic installation
                                    of software updates and patches</text></management-function>
                                <management-function><text>Enable/disable ability for websites
                                    to register protocol handlers</text></management-function>
                                <management-function><text>Enable/disable display notification
                                    when unsigned, untrusted, or unverified mobile code is
                                    encountered</text></management-function>
                                <management-function><text>Enable/disable user's ability to
                                    select default actions upon download of a file (e.g., always
                                    open, or always save, a downloaded file)</text></management-function>
                                <management-function><text>Enable/disable launching of
                                    downloaded files outside the browser</text></management-function>
                                <management-function><text>Enable/disable
                                    JavaScript</text></management-function>
                                <management-function><text>Enable/disable
                                            <selectables><selectable>ActiveX</selectable>
                                        <selectable>Flash</selectable>
                                        <selectable>Java</selectable>
                                        <selectable>
					  <assignable>other mobile code types supported by the browser</assignable></selectable>
				</selectables>
                                    mobile code</text>
				</management-function>
                                <management-function><text>Enable/disable support for
                                    add-ons</text></management-function>
                                <management-function><text>Enable/disable individual
                                    add-ons</text></management-function>
                                <management-function><text>Enable/disable HSTS
                                    mode</text></management-function>
                            </management-function-set></title>
                        <ext-comp-def-title>
                            <title>
                                The TSF shall be capable of performing the following management functions, controlled by the administrator or user as shown: <assignable>list of management functions to be performed by role</assignable>.
                            </title>
                        </ext-comp-def-title>
                        <note role="application"> For these management functions, the term
                            "Administrator" refers to the administrator of a non-mobile device or
                            the device owner of a mobile device. The intent of this requirement is
                            to allow the user and administrator of the platform to configure the
                            browser with configuration policies. If the administrator has not set a
                            policy for a particular function, the user may still perform that
                            function. Enforcement of the policy is done by the browser itself, or
                            the browser and its platform in coordination with each other.<h:p/>
                            Disabling OCSP is only be permitted if "CRL" was selected in
                            FIA_X509_EXT.1.1 (in App PP).</note>
                        <aactivity>
                            <TSS>The evaluator shall verify that the TSS describes
                                those management functions which may only be configured by the
                                browser platform administrator and cannot be over-ridden by the user
                                when set according to policy. <h:p/></TSS>
                            <Guidance>The evaluator shall examine the operational guidance to verify
                                that it includes instructions for a browser platform administrator
                                to configure the functions listed in FMT_MOF.1.1. <h:p/></Guidance>
                            <Tests> The evaluator shall perform the following tests: <testlist>
                                    <test>The evaluator shall verify that functions perform as
                                        intended by enabling, disabling, and configuring the
                                        functions.</test>
                                    <test>The evaluator shall create policies that collectively
                                        include all management functions controlled by the browser
                                        platform administrator and cannot be over-ridden by the user
                                        as defined in FMT_MOF.1.1. The evaluator shall apply these
                                        policies to the browser, attempt to override each setting as
                                        the user, and verify that the browser does not permit
                                        it.</test>
                                </testlist>
                            </Tests>
                        </aactivity>
                    </f-element>
                </f-component>
            </sec:man_fmt>
            <sec:man_fpt title="Protection of the TSF (FPT)">
                <ext-comp-def fam-id="FPT_AON_EXT" title="Add-Ons">
                    <fam-behavior>Components in this family define requirements for the secure handling of add-ons that can be installed on top of the TOE.
                    </fam-behavior>
                </ext-comp-def>
                <f-component cc-id="fpt_aon_ext.1" name="Support for Only Trusted Add-ons">
                    <consistency-rationale>This SFR defines what types of plugins a web browser may use. It does not impact the App PP functionality.</consistency-rationale>
                    
                    <comp-lev> requires the TSF to either support no add-ons or to only support trusted add-ons.</comp-lev>
                    <management>The following actions could be considered for the management functions in FMT: <h:ul>
                        <h:li>Enable/disable support for add-ons.</h:li>
                    </h:ul>
                    </management>
                    <audit>There are no auditable events foreseen.</audit>
                    <dependencies>
                        No dependencies.
                    </dependencies>
                    
                    <f-element>
                        <title>The TSF shall include the capability to load <selectables onlyone="yes">
                            <selectable id="addons_supported">trusted add-ons</selectable>
                            <selectable>no add-ons</selectable>
                        </selectables>.</title>
                        <note role="application">If <xref to="addons_supported"/> is selected in FPT_AON_EXT.1.1, the TOE must also claim the selection-based SFR FPT_AON_EXT.2.
                            <h:p/>
                            If the browser does not include support for
                            installing only trusted add-ons, this requirement can be met by
                            demonstrating the ability to disable all support for add-ons as
                            specified in FMT_MOF_EXT.1.</note>
                        <aactivity>
                            <TSS>The evaluator shall verify that the TSS describes
                                whether the browser is capable of loading trusted add-ons.<h:p/></TSS>
                            <Guidance>The evaluator shall examine the operational guidance to verify
                                that it includes instructions on loading trusted add-on
                                sources.<h:p/></Guidance>
                            <Tests>The evaluator shall perform the following tests:
                                <testlist><test>The evaluator shall create or obtain an
                                    untrusted add-on and attempt to load it. The evaluator shall
                                    verify that the untrusted add-on is rejected and cannot be
                                    loaded.</test>
                                    <test>The evaluator shall create or obtain a trusted add-on and
                                        attempt to load it. The evaluator shall verify that the
                                        trusted add-on loads. </test></testlist>
                            </Tests>
                        </aactivity>
                    </f-element>
                </f-component>
                
                <ext-comp-def fam-id="FPT_DNL_EXT" title="File Downloads">
                    <fam-behavior>Components in this family define requirements for downloaded content.
                    </fam-behavior>
                </ext-comp-def>
                <f-component cc-id="fpt_dnl_ext.1" name="File Downloads">
                    
                    <consistency-rationale>This SFR defines behavior for handling file data that can be downloaded by a web browser. It does not impact the App PP functionality.</consistency-rationale>
                    
                    <comp-lev> requires the TSF to intervene in the case it is prompted to download executable file data.</comp-lev>
                    <management>The following actions could be considered for the management functions in FMT: <h:ul>
                        <h:li>Enable/disable user's ability to select default actions upon download of a file (e.g., always open, or always save, a downloaded file).</h:li>
                        <h:li>Enable/disable launching of downloaded files outside the browser.</h:li>
                    </h:ul>
                    </management>
                    <audit>There are no auditable events foreseen.</audit>
                    <dependencies>
                        No dependencies.
                    </dependencies>
                    
                    <f-element>
                        <title>The TSF shall prevent downloaded content from launching
                            automatically.</title>
                    </f-element>
                    <f-element>
                        <title>The TSF shall present the user with the option to either save or
                            discard downloaded files.</title>
                        <note role="application"> This requirement ensures that if the user
                            intentionally (via clicking on a link) or unintentionally initiates the
                            download of a file, the browser will intervene by, for example, opening
                            a dialog box that presents the user with the option to either save the
                            file to the file system or not download the file.<h:p/> In this context,
                            an executable is a file containing code for a software program that is
                            invoked independent of and outside the context of the browser. It does
                            not include mobile code, scripts, or add-ons.<h:p/>
                        </note>
                        <aactivity>
                            <TSS>The evaluator shall examine the TSS to ensure
                                that it describes the behavior of the browser when a user initiates
                                the download of a file. <h:p/></TSS>
                            <Guidance>The evaluator shall examine the operational guidance to ensure
                                it describes the dialog box that appears when a download is
                                initiated and the implications of the options presented by the
                                dialog box. <h:p/></Guidance>
                            <Tests>The evaluator shall perform the following test: <testlist>
                                    <test>The evaluator shall navigate to a website that hosts files
                                        for download including executables and shall attempt to
                                        download and open several of these files. The evaluator
                                        shall verify that the browser always presents a dialog box
                                        with the option to either download the file to the file
                                        system or to discard the file.</test>
                                </testlist>
                            </Tests>
                        </aactivity>
                    </f-element>
                </f-component>
   
                <ext-comp-def fam-id="FPT_MCD_EXT" title="Mobile Code">
                    <fam-behavior>Components in this family define requirements for execution of mobile code.
                    </fam-behavior>
                </ext-comp-def>
                <f-component cc-id="fpt_mcd_ext.1" name="Mobile Code">
                    <consistency-rationale>This SFR defines behavior for mobile code that is rendered by a web browser. It does not impact the App PP functionality.</consistency-rationale>
                    
                    <comp-lev> requires the TSF to identify the mobile code types it supports and to ensure that a mechanism exists to prevent the automatic execution of potentially malicious mobile code.</comp-lev>
                    <management>The following actions could be considered for the management functions in FMT: <h:ul>
                        <h:li>Enable/disable display notification when unsigned, untrusted, or unverified mobile code is encountered.</h:li>
                        <h:li>Enable/disable support for mobile code.</h:li>
                    </h:ul>
                    </management>
                    <audit>There are no auditable events foreseen.</audit>
                    <dependencies>
                        No dependencies.
                    </dependencies>
                    
                    <f-element>
                        <title>The TSF shall support the capability to execute 
                            <selectables onlyone="yes">
                            <selectable>
                              signed
                              <selectables linebreak="yes">
				<selectable>ActiveX</selectable>
				<selectable>Flash</selectable>
				<selectable>Java</selectable>
				<selectable>ActionScript</selectable>
				<selectable><assignable>other mobile code types supported by the browser</assignable></selectable>
			    </selectables></selectable>
                            <selectable>no</selectable>
                        </selectables> mobile code.</title>
                        <ext-comp-def-title>
                            <title>
                                The TSF shall support the capability to execute 
                                <selectables onlyone="yes">
                                    <selectable>
                                        signed <assignable>supported mobile code types</assignable>
                                        </selectable>
                                    <selectable>no</selectable>
                                </selectables> mobile code. </title>
                        </ext-comp-def-title>
                    </f-element>
                    <f-element>
                        <title>The TSF shall <selectables onlyone="yes">
                            <selectable>automatically discard</selectable>
                            <selectable id="s_user_discard">provide the user with the option to discard</selectable>
                        </selectables> 
                            unsigned, untrusted, or unverified <selectables linebreak="yes">
                                <selectable>ActiveX</selectable>
                                <selectable>Flash</selectable>
                                <selectable>Java</selectable>
                                <selectable>ActionScript</selectable>
                                <selectable><assignable>other mobile code types supported by the
                                        browser</assignable></selectable>
                            </selectables> mobile code without executing it.</title>
                        <ext-comp-def-title>
                            <title>The TSF shall <selectables onlyone="yes">
                                <selectable>automatically discard</selectable>
                                <selectable>provide the user with the option to discard</selectable>
                            </selectables> 
                                unsigned, untrusted, or unverified <assignable>supported mobile code types</assignable>
                                 mobile code without executing it.</title>
                        </ext-comp-def-title>
                        <note role="application"> The ST author must specify all
                            mobile code types for which the browser provides this support. <h:p/>An
                            authorized signer may directly sign the code itself, or the code may be
                            delivered over an authenticated HTTPS connection with an authorized
                            entity. </note>
                        <aactivity>
                            <TSS>The evaluator shall examine the TSS to ensure it
                                lists the types of signed mobile code that the browser supports. The
                                    TSS shall describe how the browser handles
                                unsigned mobile code, mobile code from an untrusted source, and
                                mobile code from an unverified source. <h:p/></TSS>
				<Guidance>
				  <h:span><depends on="s_user_discard"/>
                                  <!-- If <xref to="s_user_discard"/> is selected in FPT_MCD_EXT.1.2, -->
				 The evaluator shall examine the operational guidance to verify
                                it provides configuration instructions for each of the supported
                                mobile code types. The operational guidance shall also describe the
                                alert that the browser displays to the user when unsigned,
                                untrusted, or unverified mobile code is encountered and the actions
                                the user can take. </h:span></Guidance>
                            <Tests>The evaluator shall perform the following test for each mobile
                                code type specified in the TSS: <testlist>
                                    <test>
                                        The evaluator shall construct a web page containing correctly signed mobile code and show that it is accepted and executes. 
                                        The evaluator shall then construct three web pages containing unacceptable mobile code: 
                                        the first web page contains mobile code that is unsigned; 
                                        the second web page contains mobile code that is untrusted; 
                                        the third web page contains mobile code that is unverified.  
                                        The evaluator shall then attempt to load the mobile code from each of the three web pages, 
                                        and observe either that the code is rejected or that the user is prompted to accept or reject the code, depending on the selections made in FPT_MCD_EXT.1.2. 
                                        If the user has the ability to accept or reject the code, the evaluator shall verify that the code is not executed after being rejected.
                                    </test>
                                </testlist>
                            </Tests>
                        </aactivity>
                    </f-element>
                </f-component>

      
            </sec:man_fpt>
        </man-sfrs>
      </module>
      <base-pp>
	<git>
	  <url>https://github.com/commoncriteria/application</url>
	  <branch>release-1.4</branch>
	  <commit>637a6687ff37d1807f1c5685770c96d69bea065d</commit>
	</git>
	<sec:SFRs>  <!-- 5.1 Security Functional Requirements -->


		<!-- 5.1.1 Cryptographic Support (FCS) -->
	<section title="Cryptographic Support (FCS)" id="fcs">
	  

		<!-- FCS_CKM.1 -->
        <f-component cc-id="fcs_ckm.1" name="Cryptographic Key Generation Services">
			<f-element id="fel-asym-key-gen">
				<title>
					The application shall <selectables linebreak="yes">
						<selectable id="sel_invoke_genkey">invoke platform-provided functionality for asymmetric key generation</selectable>
					</selectables>.
				</title>
				<note role="application">If "<h:i>implement asymmetric key generation</h:i>" or 
					"<h:i>invoke platform-provided functionality for asymmetric key generation</h:i>" is chosen, then
					additional FCS_CKM.1/AK elements shall be included in the ST.
				</note>
				<aactivity level="element">
					<TSS>
						The evaluator shall inspect the application and its developer documentation 
						to determine if the application needs asymmetric key generation services. If not, the 
						evaluator shall verify the <h:b>generate no asymmetric cryptographic keys</h:b> selection is present 
						in the ST. Otherwise, the evaluation activities shall be performed as stated in the 
						selection-based requirements.<h:br/>
					</TSS>
					<Guidance>None.<h:br/></Guidance>
					<Tests>None.</Tests>
				</aactivity>
			</f-element>
        </f-component>

		<!-- FCS_CKM.1/AK -->
        <f-component cc-id="fcs_ckm.1" id="fcom_asym_key_gen" iteration="AK" name="Cryptographic Asymmetric Key Generation" status="sel-based">
			<depends on="sel_invoke_genkey" and="sel_impl_genkey"/>
			<f-element id="fel-asym-key-gen-impl">
				<title>            
					The <h:b>application</h:b> shall <selectables linebreak="yes" onlyone="yes">
						<selectable>invoke platform-provided functionality</selectable>
					</selectables>
					to generate <h:b>asymmetric</h:b> cryptographic keys in accordance with a specified cryptographic key generation algorithm
					<selectables linebreak="yes">
						<selectable><h:b>[RSA schemes]</h:b> using cryptographic key sizes of <h:b>[2048-bit or greater]</h:b> that meet
							the following <h:b> FIPS PUB 186-4, "Digital Signature Standard (DSS), Appendix B.3"</h:b></selectable>
						<selectable><h:b>[ECC schemes]</h:b> using <h:b>[“NIST curves” P-256, P-384 and <selectables>
							<selectable exclusive="yes"> no other curves </selectable></selectables> 
							]</h:b>that meet the following: 
							<h:b>[FIPS PUB 186-4, “Digital Signature Standard (DSS)”, Appendix B.4]</h:b>
						</selectable> 
						<selectable>
							<h:b>[FFC schemes]</h:b> using cryptographic key sizes of <h:b>[2048-bit or greater]</h:b> 
							that meet the following: <h:b>[FIPS PUB 186-4, “Digital Signature Standard (DSS)”, Appendix B.1]</h:b>
						</selectable>
						<selectable><h:b>[FFC Schemes]</h:b><h:b> using Diffie-Hellman group 14</h:b> that meet the following: 
							<h:b>RFC 3526, Section 3</h:b>
						</selectable>
						<selectable><h:b>[FFC Schemes]</h:b><h:b> using “safe-prime” groups</h:b> that meet the following: 
							<h:b>NIST Special Publication 800-56A Revision 3, “Recommendation for Pair-Wise Key Establishment Schemes
								Using Discrete Logarithm Cryptography”</h:b> and 
							<selectables>
								<selectable>RFC 3526</selectable>
								<selectable>RFC 7919</selectable>
							</selectables>
						</selectable>  
					</selectables>.
				</title>
				<note role="application">
					The ST author shall select all key generation schemes used for key 
					establishment and entity authentication. When key generation is used for key 
					establishment, the schemes in FCS_CKM.2.1 and selected cryptographic protocols must 
					match the selection. When key generation is used for entity authentication, the public 
					key is expected to be associated with an X.509v3 certificate.<h:p/>
					If the TOE acts as a receiver in the RSA key establishment scheme, 
					the TOE does not need to implement RSA key generation. 
				</note>
				<aactivity level="element">
					<TSS>
						The evaluator shall ensure that the TSS identifies the key sizes 
						supported by the TOE. If the ST specifies more 
						than one scheme, the evaluator shall examine the TSS to verify that 
						it identifies the usage for each scheme.<h:p/>
						If the application "<h:i>invokes platform-provided functionality for asymmetric key generation</h:i>,"
						then the evaluator shall examine the TSS to verify that it describes 
						how the key generation functionality is invoked.<h:p/>
					</TSS>
					<Guidance> 
						The evaluator shall verify that the AGD guidance instructs the administrator how to 
						configure the TOE to use the selected key generation scheme(s) and 
						key size(s) for all uses defined in this PP.<h:p/>
					</Guidance>
					<Tests>
						If the application "<h:i>implements asymmetric key generation</h:i>," then the following test
						activities shall be carried out. <h:p/>
						Evaluation Activity Note: The following tests may require the developer to provide access 
						to a developer environment that provides the evaluator with tools that are typically available
						to end-users of the application.<h:p/>
						<h:b>Key Generation for FIPS PUB 186-4 RSA Schemes</h:b><h:p/>
						The evaluator shall verify the implementation of RSA Key Generation by the 
						TOE using the Key Generation test. This test verifies the ability of 
						the TSF to correctly produce values for the key components including 
						the public verification exponent e, the private prime factors p and q, the public 
						modulus n and the calculation of the private signature exponent d. Key Pair generation 
						specifies 5 ways (or methods) to generate the primes p and q. 
						These include: <h:ol>
						<h:li>Random Primes:
							<h:ul>
								<h:li>Provable primes</h:li>
								<h:li>Probable primes</h:li>
							</h:ul>
						</h:li>
						<h:li>Primes with Conditions:
							<h:ul>
								<h:li>Primes p1, p2, q1,q2, p and q shall all be provable primes</h:li>
								<h:li>Primes p1, p2, q1, and q2 shall be provable primes and p and q shall be 
									probable primes</h:li>
								<h:li>Primes p1, p2, q1,q2, p and q shall all be probable primes</h:li>
							</h:ul>
						</h:li></h:ol>
						To test the key generation method for the Random Provable primes method and for all 
						the Primes with Conditions methods, the evaluator must seed the TSF 
						key generation routine with sufficient data to deterministically generate the RSA key 
						pair. This includes the random seed(s), the public exponent of the RSA key, and the 
						desired key length. For each key length supported, the evaluator shall have the 
						TSF generate 25 key pairs. The evaluator shall verify the 
						correctness of the TSF’s implementation by comparing values 
						generated by the TSF with those generated from a known good 
						implementation.<h:p/>
						If possible, the Random Probable primes method should also be verified against a 
						known good implementation as described above. Otherwise, the evaluator shall have 
						the TSF generate 10 keys pairs for each supported key length nlen 
						and verify: <h:ul>
							<h:li>n = p&#x22c5;q,</h:li>
							<h:li>p and q are probably prime according to Miller-Rabin tests,</h:li>
							<h:li>GCD(p-1,e) = 1,</h:li>
							<h:li>GCD(q-1,e) = 1,</h:li>
							<h:li>2<h:sup>16</h:sup> &#x2264; e &#x2264; 2<h:sup>256</h:sup> and e is an odd integer,</h:li>
							<h:li>|p-q| > 2<h:sup>nlen/2 - 100</h:sup>,</h:li>
							<h:li>p &#x2265; 2<h:sup>nlen/2 -1/2</h:sup>,</h:li>
							<h:li>q &#x2265; 2<h:sup>nlen/2 -1/2</h:sup>,</h:li>
							<h:li>2<h:sup>(nlen/2)</h:sup> &lt; d &lt; LCM(p-1,q-1),</h:li>
							<h:li>e&#x22c5;d = 1 mod LCM(p-1,q-1).</h:li>
						</h:ul>
						<h:b>Key Generation for Elliptic Curve Cryptography (ECC)</h:b><h:p/>
						FIPS 186-4 ECC Key Generation Test
						For each supported NIST curve, i.e., P-256, P-384 and P-521, the evaluator shall
						require the implementation under test (IUT) to generate 10 private/public key pairs.
						The private key shall be generated using an approved random bit generator (RBG). To 
						determine correctness, the evaluator shall submit the generated key pairs to the 
						public key verification (PKV) function of a known good implementation.<h:p/>
						FIPS 186-4 Public Key Verification (PKV) Test
						For each supported NIST curve, i.e., P-256, P-384 and P-521, the evaluator shall
						generate 10 private/public key pairs using the key generation function of a known 
						good implementation and modify five of the public key values so that they are 
						incorrect, leaving five values unchanged (i.e., correct). The evaluator shall obtain 
						in response a set of 10 PASS/FAIL values.<h:p/>
						<h:b>Key Generation for Finite-Field Cryptography (FFC)</h:b><h:p/>
						The evaluator shall verify the implementation of the Parameters Generation and the 
						Key Generation for FFC by the TOE using the Parameter Generation and 
						Key Generation test. This test verifies the ability of the TSF to 
						correctly produce values for the field prime p, the cryptographic prime q (dividing 
						p-1), the cryptographic group generator g, and the calculation of the private key x 
						and public key y. The Parameter generation specifies 2 ways (or methods) to generate 
						the cryptographic prime q and the field prime p:<h:p/>
						Cryptographic and Field Primes:	<h:ul>
							<h:li>Primes q and p shall both be provable primes</h:li>
							<h:li>Primes q and field prime p shall both be probable primes</h:li>
						</h:ul>
						and two ways to generate the cryptographic group generator g:<h:p/>
						Cryptographic Group Generator:
						<h:ul>
							<h:li>Generator g constructed through a verifiable process</h:li>
							<h:li>Generator g constructed through an unverifiable process.</h:li>
						</h:ul>
						The Key generation specifies 2 ways to generate the private key x:<h:p/>
						Private Key:
						<h:ul>
							<h:li>len(q) bit output of RBG where 1 &#x2264;x &#x2264; q-1</h:li>
							<h:li>len(q) + 64 bit output of RBG, followed by a mod q-1 operation where 
								1&#x2264; x&#x2264;q-1.</h:li>
						</h:ul>
						The security strength of the RBG must be at least that of the security offered by the 
						FFC parameter set.
						To test the cryptographic and field prime generation method for the provable primes 
						method and/or the group generator g for a verifiable process, the evaluator must seed 
						the TSF parameter generation routine with sufficient data to 
						deterministically generate the parameter set.
						For each key length supported, the evaluator shall have the TSF 
						generate 25 parameter sets and key pairs. The evaluator shall verify the correctness 
						of the TSF’s implementation by comparing values generated by the 
						TSF with those generated from a known good implementation. 
						Verification must also confirm
						<h:ul>
							<h:li>g &#8800; 0,1</h:li>
							<h:li>q divides p-1</h:li>
							<h:li>g<h:sup>q</h:sup> mod p = 1</h:li>
							<h:li>g<h:sup>x</h:sup> mod p = y</h:li>
						</h:ul>
						for each FFC parameter set and key pair. <h:p/>
						<h:b>Diffie-Hellman Group 14 and FFC Schemes using “safe-prime” groups</h:b><h:p/>
						Testing for FFC Schemes using Diffie-Hellman group 14 and/or safe-prime groups is done as part of testing
						in CKM.2.1.
					</Tests>
				</aactivity>
			</f-element>
        </f-component>

		<!-- FCS_CKM.1/SK (formerly FCS_CKM.1/2) -->
        <f-component cc-id="fcs_ckm.1" id="fcom_sym_key_gen" iteration="SK" name="Cryptographic Symmetric Key Generation" status="optional">
			<f-element id="fel-sym-key-gen">
				<title>
					The <h:b>application</h:b> shall generate <h:b>symmetric</h:b> cryptographic keys <h:b>using a Random Bit
					Generator as specified in FCS_RBG_EXT.1</h:b>  and specified
					cryptographic key sizes <selectables linebreak="yes">
						<selectable>128 bit</selectable>
						<selectable>256 bit</selectable>
					</selectables>. 
				</title>
				<note role="application">
					Symmetric keys may be used to generate keys along the key chain.</note>
				<aactivity>
					<!-- Revised <tss>The evaluator shall review the TSS to determine that it describes how the
					functionality described by FCS_RBG_EXT.1 <cite linkend="bibAppPP"/> is invoked.<br/>
					If the email client is relying on random from the host platform, the evaluator shall
					verify the TSS includes the name/manufacturer of the external RBG. If different
					external RBGs are used for different platforms, the TSS identifies each one for each
					platform. <br/>If the email client is relying on random from the host platform, the
					evaluator shall verify the TSS describes the function call and parameters used when
					calling the external DRBG function. Also, the TSS includes a short description of
					the vendor's assumption for the amount of entropy seeding the external DRBG. The
					evaluator uses the description of the RBG functionality in FCS_RBG_EXT or
					documentation available for the operational environment to determine that the key
					size being requested is identical to the key size and mode to be used for the
					encryption/decryption of the user data (<linkref linkend="FCS_COP.1(f)" />. </tss> -->
					<TSS>
						The evaluator shall review the TSS to determine that it describes how the functionality described by
						FCS_RBG_EXT.1 is invoked.<h:p/> 
						If the application is relying on random bit generation from the
						host platform, the evaluator shall verify the TSS includes the
						name/manufacturer of the external RBG and describes the function call and parameters
						used when calling the external DRBG function. If different external RBGs are used
						for different platforms, the evaluator shall verify the TSS identifies each RBG for
						each platform. Also, the evaluator shall verify the TSS includes a short description
						of the vendor's assumption for the amount of entropy seeding the external DRBG. The
						evaluator uses the description of the RBG functionality in FCS_RBG_EXT or
						documentation available for the operational environment to determine that the key
						size being requested is identical to the key size and mode to be used for the
						encryption/decryption of the user data.<h:p/>
					</TSS>
					<Guidance>None.<h:p/></Guidance>
					<Tests>None.</Tests>
				</aactivity>
			</f-element>
        </f-component>

		<!-- FCS_CKM.1/PBKDF (formerly FCS_CKM.1/3) -->
		<f-component name="Password Conditioning" cc-id="fcs_ckm.1" id="fcom_pass" iteration="PBKDF" status="sel-based">
			<depends on="sel-fcs-sto-pbkdf"/>
			<f-element id="fel-pass">
				<title>
					A password/passphrase shall perform <assignable>Password-based Key Derivation Functions</assignable> 
					in accordance with a specified cryptographic algorithm as specified in FCS_COP.1/KeyedHash, with <assignable>positive 
					integer of 1,000 or more</assignable> iterations, and output cryptographic key sizes <selectables>
						<selectable>128</selectable>
						<selectable>256</selectable>
					</selectables>
					that meet the following <h:b>[NIST SP 800-132]</h:b>.  
				</title>
			</f-element>
			<f-element id="fel-gen-salts">
				<title>
					The TSF shall generate salts using a RBG that meets FCS_RBG_EXT.1 and with entropy corresponding
					to the security strength selected for PBKDF in FCS_CKM.1.1/PBKDF.
				</title>
				<note role="application">
					This should be included if selected in FCS_STO_EXT.1<h:p/>
					Conditioning can be performed using one of the identified hash functions or the process described 
					in NIST SP 800-132; the method used is selected by the ST Author. SP 800-132 requires the use of a pseudo-random 
					function (PRF) consisting of HMAC with an approved hash function. The ST author selects the hash function used, 
					also includes the appropriate requirements for HMAC and the hash function. <h:p/>
					Appendix A of SP 800-132 recommends setting the iteration count in order to increase the computation needed to derive a 
					key from a password and, therefore, increase the workload of performing a password recovery attack. A significantly higher 
					value is recommended to ensure optimal security. This value is expected to increase to a minimum of 10,000 in a future 
					iteration based on SP800-63.
				</note>
				<aactivity>
					<TSS> 
						Support for PBKDF: The evaluator shall examine the password hierarchy TSS to ensure that 
						the formation of all password based derived keys is described and that the key sizes match that 
						described by the ST author. 
						The evaluator shall check that the TSS describes the method by which the password/passphrase is first encoded and then fed to 
						the SHA algorithm. The settings for the algorithm (padding, blocking, etc.) shall be described, and the evaluator shall verify 
						that these are supported by the selections in this component as well as the selections concerning the hash function itself. 
						The evaluator shall verify that the TSS contains a description of how the output of the hash function is used to form the 
						submask that will be input into the function.
						For the NIST SP 800-132-based conditioning of the password/passphrase, the required evaluation activities will be performed when 
						doing the evaluation activities for the appropriate requirements (FCS_COP.1.1/KeyedHash).
						No explicit testing of the formation of the submask from the input password is required. 
						FCS_CKM.1.1/PBKDF: The ST author shall provide a description in the TSS regarding the salt generation. 
						The evaluator shall confirm that the salt is generated using an RBG described in FCS_RBG_EXT.1.<h:p/>
					</TSS>
					<Guidance>None.<h:p/></Guidance>
					<Tests>None.</Tests>
				</aactivity>
			</f-element>
		</f-component>

		<!-- FCS_CKM.2 -->
        <f-component cc-id="fcs_ckm.2" name="Cryptographic Key Establishment" status="sel-based">
			<depends on="sel_all_tls"/>
			<f-element id="fel-key-est">
				<title>
					The application shall 
						<selectables onlyone="yes">
							<selectable>invoke platform-provided functionality</selectable>
							<selectable>implement functionality</selectable>
						</selectables> 
					to perform cryptographic key establishment in accordance with a specified 
					cryptographic key establishment method:<h:p/>
					<selectables linebreak="yes">	    
						<selectable>
							<h:b>[RSA-based key establishment schemes]</h:b> that meets the following: <h:b>[NIST 
							Special Publication 800-56B, “Recommendation for Pair-Wise Key Establishment 
							Schemes Using Integer Factorization Cryptography”]</h:b>
						</selectable>
						<selectable><h:b>[RSA-based key establishment schemes]</h:b>
							that meet the following: <h:b>RSAES-PKCS1-v1_5 as specified in Section 7.2 of RFC 8017,
							“Public-Key Cryptography Standards (PKCS) #1: RSA Cryptography Specifications Version 2.1”</h:b>
						</selectable>
						<selectable>
							<h:b>[Elliptic curve-based key establishment schemes]</h:b> that meets the 
							following: <h:b>[NIST Special Publication 800-56A, “Recommendation for Pair-Wise Key Establishment 
							Schemes Using Discrete Logarithm Cryptography”]</h:b>
						</selectable>
						<selectable>
							<h:b>[Finite field-based key establishment schemes]</h:b> that meets the following: 
							<h:b>[NIST Special Publication 800-56A, “Recommendation for Pair-Wise Key 
							Establishment Schemes Using Discrete Logarithm Cryptography”]</h:b>
						</selectable>
						<selectable><h:b>[Key establishment scheme using Diffie-Hellman group 14]</h:b>
							that meets the following: <h:b>RFC 3526, Section 3</h:b>
						</selectable>
						<selectable><h:b>[FFC Schemes using “safe-prime” groups]</h:b>
							that meet the following: <h:b>‘NIST Special Publication 800-56A Revision 3,
							“Recommendation for Pair-Wise Key Establishment Schemes Using Discrete Logarithm Cryptography”</h:b>
							and <selectables>
								<selectable>RFC 3526</selectable>
								<selectable>RFC 7919</selectable>
							</selectables>.
						</selectable>
					</selectables>.
				</title>
				<note role="application">
					The ST author shall select all key establishment schemes used for the selected cryptographic 
					protocols. TLS requires cipher suites that use RSA-based key establishment 
					schemes. <h:p/>
					The RSA-based key establishment schemes are described in Section 9 of NIST SP 800-56B; 
					however, Section 9 relies on implementation of other sections in SP 800-56B. If the TOE acts 
					as a receiver in the RSA key establishment scheme, the TOE does not need to implement 
					RSA key generation.<h:p/>
					The elliptic curves used for the key establishment scheme shall correlate with the curves 
					specified in FCS_CKM.1.1/AK.<h:p/>
					The domain parameters used for the finite field-based key establishment scheme are specified 
					by the key generation according to FCS_CKM.1.1/AK.
				</note>
				<aactivity level="element">
					<TSS>
						The evaluator shall ensure that the supported key establishment schemes correspond to the 
						key generation schemes identified in FCS_CKM.1.1. If the ST specifies more than one 
						scheme, the evaluator shall examine the TSS to verify that it identifies the usage for each 
						scheme.<h:p/>
					</TSS>
					<Guidance> 
						The evaluator shall verify that the AGD guidance instructs the administrator how to configure 
						the TOE to use the selected key establishment scheme(s).  <h:p/>  
					</Guidance>
					<Tests>
						Evaluation Activity Note: The following tests require the developer to provide access to a test 
						platform that provides the evaluator with tools that are typically not found on factory 
						products. <h:p/>
						<h:b>Key Establishment Schemes</h:b><h:p/>
						The evaluator shall verify the implementation of the key establishment schemes supported by 
						the TOE using the applicable tests below. <h:p/>
						<h:b>SP800-56A Key Establishment Schemes</h:b><h:p/>
						The evaluator shall verify a TOE's implementation of SP800-56A key agreement schemes 
						using the following Function and Validity tests. These validation tests for each key agreement 
						scheme verify that a TOE has implemented the components of the key agreement scheme 
						according to the specifications in the Recommendation. These components include the 
						calculation of the DLC primitives (the shared secret value Z) and the calculation of the 
						derived keying material (DKM) via the Key Derivation Function (KDF). If key confirmation 
						is supported, the evaluator shall also verify that the components of key confirmation have 
						been implemented correctly, using the test procedures described below. This includes the 
						parsing of the DKM, the generation of MACdata and the calculation of MACtag. <h:p/>
						<h:b>Function Test</h:b><h:p/>
						The Function test verifies the ability of the TOE to implement the key agreement 
						schemes correctly. To conduct this test the evaluator shall generate or obtain test vectors 
						from a known good implementation of the TOE supported schemes. For each supported 
						key agreement scheme-key agreement role combination, KDF type, and, if supported, 
						key confirmation role- key confirmation type combination, the tester shall generate 10 
						sets of test vectors. The data set consists of one set of domain parameter values (FFC) or 
						the NIST approved curve (ECC) per 10 sets of public keys. These keys are static, 
						ephemeral or both depending on the scheme being tested.<h:p/>
						The evaluator shall obtain the DKM, the corresponding TOE’s public keys (static and/or 
						ephemeral), the MAC tag(s), and any inputs used in the KDF, such as the Other 
						Information <h:i>(OtherInfo)</h:i> and TOE id fields. <h:p/>
						If the TOE does not use a KDF defined in SP 800-56A, the evaluator shall obtain only 
						the public keys and the hashed value of the shared secret.<h:p/>
						The evaluator shall verify the correctness of the TSF’s implementation of a given 
						scheme by using a known good implementation to calculate the shared secret value, 
						derive the keying material DKM, and compare hashes or MAC tags generated from 
						these values. <h:p/>
						If key confirmation is supported, the TSF shall perform the above for each implemented 
						approved MAC algorithm. <h:p/>
						<h:b>Validity Test</h:b><h:p/>
						The Validity test verifies the ability of the TOE to recognize another party’s valid and 
						invalid key agreement results with or without key confirmation. To conduct this test, the 
						evaluator shall obtain a list of the supporting cryptographic functions included in the 
						SP800-56A key agreement implementation to determine which errors the TOE should 
						be able to recognize. The evaluator generates a set of 24 (FFC) or 30 (ECC) test vectors 
						consisting of data sets including domain parameter values or NIST approved curves, the 
						evaluator’s public keys, the TOE’s public/private key pairs, MACTag, and any inputs 
						used in the KDF, such as the OtherInfo and TOE id fields. <h:p/>
						The evaluator shall inject an error in some of the test vectors to test that the TOE 
						recognizes invalid key agreement results caused by the following fields being incorrect: 
						the shared secret value Z, the DKM, the OtherInfo field, the data to be 
						MACed, or the generated MACTag. If the TOE contains the full or partial (only ECC) 
						public key validation, the evaluator will also individually inject errors in both parties’ 
						static public keys, both parties’ ephemeral public keys and the TOE’s static private key 
						to assure the TOE detects errors in the public key validation function and/or the partial 
						key validation function (in ECC only). At least two of the test vectors shall remain 
						unmodified and therefore should result in valid key agreement results (they should pass).<h:p/>
						The TOE shall use these modified test vectors to emulate the key agreement scheme 
						using the corresponding parameters. The evaluator shall compare the TOE’s results with 
						the results using a known good implementation verifying that the TOE detects these errors.<h:p/>
						<h:b>SP800-56B Key Establishment Schemes</h:b><h:p/>
						The evaluator shall verify that the TSS describes whether the TOE acts as a sender, a 
						recipient, or both for RSA-based key establishment schemes. <h:p/>
						If the TOE acts as a sender, the following evaluation activity shall be performed to ensure the 
						proper operation of every TOE supported combination of RSA-based key establishment scheme: <h:p/>
						<h:div class="indent">
							To conduct this test the evaluator shall generate or obtain test vectors from a known 
							good implementation of the TOE supported schemes. For each combination of 
							supported key establishment scheme and its options (with or without key confirmation 
							if supported, for each supported key confirmation MAC function if key confirmation 
							is supported, and for each supported mask generation function if KTS-OAEP is 
							supported), the tester shall generate 10 sets of test vectors. Each test vector shall 
							include the RSA public key, the plaintext keying material, any additional input 
							parameters if applicable, the MacKey and MacTag if key confirmation is 
							incorporated, and the outputted ciphertext. For each test vector, the evaluator shall 
							perform a key establishment encryption operation on the TOE with the same inputs 
							(in cases where key confirmation is incorporated, the test shall use the MacKey from 
							the test vector instead of the randomly generated MacKey used in normal operation) 
							and ensure that the outputted ciphertext is equivalent to the ciphertext in the test vector.
						</h:div><h:p/>
						If the TOE acts as a receiver, the following evaluation activities shall be performed to ensure 
						the proper operation of every TOE supported combination of RSA-based key establishment scheme:<h:p/>
						<h:div class="indent">
							To conduct this test the evaluator shall generate or obtain test vectors from a known 
							good implementation of the TOE supported schemes. For each combination of 
							supported key establishment scheme and its options (with our without key 
							confirmation if supported, for each supported key confirmation MAC function if key 
							confirmation is supported, and for each supported mask generation function if KTS-OAEP is 
							supported), the tester shall generate 10 sets of test vectors. Each test vector 
							shall include the RSA private key, the plaintext keying material (KeyData), any 
							additional input parameters if applicable, the MacTag in cases where key 
							confirmation is incorporated, and the outputted ciphertext. For each test vector, the 
							evaluator shall perform the key establishment decryption operation on the TOE and 
							ensure that the outputted plaintext keying material (KeyData) is equivalent to the 
							plaintext keying material in the test vector. In cases where key confirmation is 
							incorporated, the evaluator shall perform the key confirmation steps and ensure that 
							the outputted MacTag is equivalent to the MacTag in the test vector.
						</h:div> <h:p/>
						The evaluator shall ensure that the TSS describes how the TOE handles decryption errors. In 
						accordance with NIST Special Publication 800-56B, the TOE must not reveal the particular 
						error that occurred, either through the contents of any outputted or logged error message or 
						through timing variations. If KTS-OAEP is supported, the evaluator shall create separate 
						contrived ciphertext values that trigger each of the three decryption error checks described in 
						NIST Special Publication 800-56B section 7.2.2.3, ensure that each decryption attempt 
						results in an error, and ensure that any outputted or logged error message is identical for each. 
						If KTS-KEM-KWS is supported, the evaluator shall create separate contrived ciphertext 
						values that trigger each of the three decryption error checks described in NIST Special 
						Publication 800-56B section 7.2.3.3, ensure that each decryption attempt results in an error, 
						and ensure that any outputted or logged error message is identical for each.<h:p/>
						<h:b>RSA-based key establishment</h:b><h:p/>
						The evaluator shall verify the correctness of the TSF’s implementation of RSAES-PKCS1-v1_5 by using a
						known good implementation for each protocol selected in FTP_DIT_EXT.1 that uses RSAES-PKCS1-v1_5.  <h:p/>
						<h:b>Diffie-Hellman Group 14</h:b><h:p/>
						The evaluator shall verify the correctness of the TSF’s implementation of Diffie-Hellman group 14 by using
						a known good implementation for each protocol selected in FTP_DIT_EXT.1 that uses Diffie-Hellman group 14.<h:p/>
						<h:b>FFC Schemes using “safe-prime” groups</h:b><h:p/>
						The evaluator shall verify the correctness of the TSF’s implementation of safe-prime groups by using a
						known good implementation for each protocol selected in FTP_DIT_EXT.1 that uses safe-prime groups. This test
						must be performed for each safe-prime group that each protocol uses.
					</Tests>
				</aactivity>
			</f-element>
        </f-component>

<!-- 

Commenting out: the fundamental question is how to handle requirements for more general
functionality (such as these)
        <f-component cc-id="fcs_cop_ext.1" name="Encryption/Decryption Services">
          <f-element id="fel-">
            <title>The application shall <selectables linebreak="yes">
                <selectable>perform no encryption/decryption</selectable>
                <selectable>invoke platform-provided encryption/decryption functionality</selectable>
                <selectable>implement encryption/decryption functionality</selectable>
              </selectables> 
	      .
	    </title>
            <note role="application">
			  The selection <i>invoke platform-provided encryption/decryption services</i> is to be
              chosen in cases where the application uses platform APIs to perform these operations.
              If <i>implement encryption/decryption functionality</i> is selected, then
              additional requirements from <linkref linkend="FCS_COP.1(1)"/> shall be included in
              the ST.  
            </note>
            <aactivity>
              If <b>perform no encryption/decryption</b> is selected, the evaluator shall inspect the 
			  application and its developer documentation and verify that the application needs no
              encryption/decryption services. 
			  <br/>
              If <b>implement encryption/decryption functionality</b> is selected, the evaluator shall ensure
			  that additional <linkref linkend="FCS_COP.1(1)"/> elements are included in the ST.
			  <br/>
			  If <b>invoke platform-provided encryption/decryption functionality </b> is selected, 
			  the evaluator shall examine the TSS of the
              application to verify that it describes how the platform's encryption/decryption
              functionality is invoked for each operation for which it is used by the application. 
			</aactivity>
          </f-element>
        </f-component>

        <f-component cc-id="fcs_cop_ext.2" name="Cryptographic Hashing Services">
          <f-element id="fel-">
            <title>The application shall <selectables linebreak="yes">
                <selectable>perform no cryptographic hashing</selectable>
                <selectable>invoke platform-provided cryptographic hashing</selectable>
                <selectable>implement cryptographic hashing</selectable>
              </selectables> 
	      .
	    </title>
            <note role="application">
			  The selection <i>invoke platform-provided cryptographic hashing</i> is to be
              chosen in cases where the application uses platform APIs to perform cryptographic
              hashing. If <i>implement cryptographic hashing</i> is selected, then
              additional requirements from <linkref linkend="FCS_COP.1(2)"/> shall be included in
              the ST.
            </note>
            <aactivity>
              If <b>perform no cryptographic hashing</b> is selected, the evaluator shall inspect the 
			  application and its developer documentation and verify that the application needs no
              cryptographic hashing services. 
			  <br/>
              If <b>implement cryptographic hashing</b> is selected, the evaluator shall ensure
			  that additional <linkref linkend="FCS_COP.1(2)"/> elements are included in the ST.
			  <br/>
			  If <b>invoke platform-provided cryptographic hashing</b> is selected, 
			  the evaluator shall examine the TSS of the
              application to verify that it describes how the platform's hashing
              functionality is invoked for each operation for which it is used in the application, including
			  digest sizes used.
			</aactivity>
          </f-element>
        </f-component>

        <f-component cc-id="fcs_cop_ext.3" name="Cryptographic Signing Services">
          <f-element id="fel-">
            <title>The application shall 
			  <selectables linebreak="yes">
                <selectable>perform no cryptographic signing</selectable>
                <selectable>invoke platform-provided cryptographic signing</selectable>
                <selectable>implement cryptographic signing</selectable>
              </selectables> 
	        .
	        </title>
            <note role="application">The selection <i>invoke platform-provided cryptographic signing</i> 
			  is to be used in cases where the application uses platform APIs to perform cryptographic
              signing. If <i>implement cryptographic signing</i> is selected, then
              additional requirements from <linkref linkend="FCS_COP.1(3)"/> shall be included in
              the ST.
            </note>
            <aactivity>
              If <b>perform no cryptographic signing</b> is selected, the evaluator shall inspect the 
			  application and its developer documentation and verify that the application needs no
              cryptographic hashing services. 
			  <br/>
              If <b>implement cryptographic signing</b> is selected, the evaluator shall ensure
			  that additional <linkref linkend="FCS_COP.1(3)"/> elements are included in the ST.
			  <br/>
			  If <b>invoke platform-provided cryptographic cryptographic signing</b> is selected, 
			  the evaluator shall examine the TSS of the
              application to verify that it describes how the platform's digital signature
              functionality is invoked for each operation for which it is used in the application, 
			  including digest sizes used.
              </aactivity>
          </f-element>
        </f-component>
-->

		<!-- FCS_COP.1/SKC (formerly FCS_COP.1/1) Symmetric-Key Cryptography -->
        <f-component cc-id="fcs_cop.1" id="fcom_crypto" iteration="SKC" name="Cryptographic Operation - Encryption/Decryption" status="sel-based">
			<depends on="sel_all_tls"/>
			<depends on="sel-fcs-sto-skc"/>
			<f-element id="fel-sym-encrypt">
				<title>
					The <h:b>application</h:b> shall perform <h:i>encryption/decryption</h:i> in accordance with a specified 
					cryptographic algorithm  
					<selectables linebreak="yes">
						<selectable>AES-CBC (as defined in NIST SP 800-38A) mode</selectable>
						<selectable>AES-GCM (as defined in NIST SP 800-38D) mode</selectable>
						<selectable>AES-XTS (as defined in NIST SP 800-38E) mode</selectable>
						<selectable>AES-CCM (as defined in NIST SP 800-38C) mode</selectable>
						<selectable>AES-CTR (as defined in NIST SP 800-38A) mode</selectable>
					</selectables>
					and cryptographic key sizes 
					<selectables>
						<selectable>128-bit</selectable>
						<selectable>256-bit</selectable>
					</selectables>.
				</title>
				<note role="application">
					This is dependent on implementing cryptographic functionality, as in FTP_DIT_EXT.1.<h:br/>
					For the first selection, the ST author should choose
					the mode or modes in which AES operates. For the second selection, the ST author should
					choose the key sizes that are supported by this functionality. 128-bit key size 
					is required in order to comply with certain TLS implementations.<h:p/>
				</note>
				<aactivity>
					<TSS>None.<h:p/></TSS>
					<Guidance> 
						The evaluator checks the AGD documents to determine that any configuration that 
						is required to be done to configure the functionality for the required modes
						and key sizes is present.<h:p/>
					</Guidance>
					<Tests>
						The evaluator shall perform all of the following tests for each algorithm implemented by the TSF and used to
						satisfy the requirements of this PP:<h:p/>
						<h:b>AES-CBC Known Answer Tests</h:b><h:p/>
						There are four Known Answer Tests (KATs), described below. In all KATs, the plaintext, ciphertext, and IV values shall be 128-bit
						blocks. The results from each test may either be obtained by the
						evaluator directly or by supplying the inputs to the implementer
						and receiving the results in response. To determine correctness,
						the evaluator shall compare the resulting values to those obtained
						by submitting the same inputs to a known good implementation. <h:ul>
							<h:li>KAT-1. To test the encrypt functionality of AES-CBC, the
								evaluator shall supply a set of 10 plaintext values and obtain
								the ciphertext value that results from AES-CBC encryption of the
								given plaintext using a key value of all zeros and an IV of all
								zeros. Five plaintext values shall be encrypted with a 128-bit
								all-zeros key, and the other five shall be encrypted with a
								256-bit all- zeros key. To test the decrypt functionality of
								AES-CBC, the evaluator shall perform the same test as for
								encrypt, using 10 ciphertext values as input and AES-CBC
								decryption.</h:li>
							<h:li>KAT-2. To test the encrypt functionality of AES-CBC, the
								evaluator shall supply a set of 10 key values and obtain the
								ciphertext value that results from AES-CBC encryption of an
								all-zeros plaintext using the given key value and an IV of all
								zeros. Five of the keys shall be 128-bit keys, and the other five
								shall be 256-bit keys. To test the decrypt functionality of
								AES-CBC, the evaluator shall perform the same test as for
								encrypt, using an all-zero ciphertext value as input and AES-CBC
								decryption.</h:li>
							<h:li>KAT-3. To test the encrypt functionality of AES-CBC, the
								evaluator shall supply the two sets of key values described below
								and obtain the ciphertext value that results from AES encryption
								of an all-zeros plaintext using the given key value and an IV of
								all zeros. The first set of keys shall have 128 128-bit keys, and
								the second set shall have 256 256-bit keys. Key i in each set
								shall have the leftmost i bits be ones and the rightmost N-i bits
								be zeros, for i in [1,N]. To test the decrypt functionality of
								AES-CBC, the evaluator shall supply the two sets of key and
								ciphertext value pairs described below and obtain the plaintext
								value that results from AES-CBC decryption of the given
								ciphertext using the given key and an IV of all zeros. The first
								set of key/ciphertext pairs shall have 128 128-bit key/ciphertext
								pairs, and the second set of key/ciphertext pairs shall have 256
								256-bit key/ciphertext pairs. Key i in each set shall have the
								leftmost i bits be ones and the rightmost N-i bits be zeros, for
								i in [1,N]. The ciphertext value in each pair shall be the value
								that results in an all-zeros plaintext when decrypted with its
								corresponding key.</h:li>
							<h:li>KAT-4. To test the encrypt functionality of AES-CBC, the
								evaluator shall supply the set of 128 plaintext values described
								below and obtain the two ciphertext values that result from
								AES-CBC encryption of the given plaintext using a 128-bit key
								value of all zeros with an IV of all zeros and using a 256-bit
								key value of all zeros with an IV of all zeros, respectively.
								Plaintext value i in each set shall have the leftmost i bits be
								ones and the rightmost 128-i bits be zeros, for i in
								[1,128].</h:li>
						</h:ul>To test the decrypt functionality of AES-CBC, the evaluator
						shall perform the same test as for encrypt, using ciphertext values
						of the same form as the plaintext in the encrypt test as input and
						AES-CBC decryption. <h:p/>
						<h:b>AES-CBC Multi-Block Message Test</h:b><h:p/>
						The evaluator shall test the encrypt functionality by
						encrypting an i-block message where 1 &lt; i &lt;= 10. The
						evaluator shall choose a key, an IV and plaintext message of length
						i blocks and encrypt the message, using the mode to be tested, with
						the chosen key and IV. The ciphertext shall be compared to the
						result of encrypting the same plaintext message with the same key
						and IV using a known good implementation. The evaluator shall also
						test the decrypt functionality for each mode by decrypting an
						i-block message where 1 &lt; i &lt;=10. The evaluator shall choose
						a key, an IV and a ciphertext message of length i blocks and
						decrypt the message, using the mode to be tested, with the chosen
						key and IV. The plaintext shall be compared to the result of
						decrypting the same ciphertext message with the same key and IV
						using a known good implementation. AES-CBC Monte Carlo Tests The
						evaluator shall test the encrypt functionality using a set of 200
						plaintext, IV, and key 3- tuples. 100 of these shall use 128 bit
						keys, and 100 shall use 256 bit keys. The plaintext and IV values
						shall be 128-bit blocks. For each 3-tuple, 1000 iterations shall be
						run as follows: 
						  <h:pre>
						  # Input: PT, IV, Key
						  for i = 1 to 1000:
							if i == 1:
								  CT[1] = AES-CBC-Encrypt(Key, IV, PT)
								  PT = IV
							else:
							  CT[i] = AES-CBC-Encrypt(Key, PT) 
							  PT = CT[i-1]
						  </h:pre>
						The ciphertext computed in the 1000th iteration (i.e.,
						CT[1000]) is the result for that trial. This result shall be
						compared to the result of running 1000 iterations with the same
						values using a known good implementation.<h:p/>
						The evaluator shall test the decrypt functionality using the
						same test as for encrypt, exchanging CT and PT and replacing
						AES-CBC-Encrypt with AES-CBC-Decrypt. <h:p/>
						<h:b>AES-GCM Monte Carlo Tests</h:b><h:p/>
						The evaluator shall test the authenticated encrypt
						functionality of AES-GCM for each combination of the following
						input parameter lengths: <h:ul>
							<h:li>128 bit and 256 bit keys</h:li>
							<h:li>Two plaintext lengths. One of the plaintext lengths shall be
								a non-zero integer multiple of 128 bits, if
								supported. The other plaintext length shall not be an integer
								multiple of 128 bits, if supported.</h:li>
							<h:li>Three AAD lengths. One AAD length shall be 0, if supported.
								One AAD length shall be a non-zero integer
								multiple of 128 bits, if supported. One AAD length shall not be
								an integer multiple of 128 bits, if supported.</h:li>
							<h:li>Two IV lengths. If 96 bit IV is supported, 96 bits shall be
								one of the two IV lengths tested.</h:li>
						</h:ul>The evaluator shall test the encrypt functionality using a set
						of 10 key, plaintext, AAD, and IV tuples for each combination of
						parameter lengths above and obtain the ciphertext value and tag
						that results from AES-GCM authenticated encrypt. Each supported tag
						length shall be tested at least once per set of 10. The IV value
						may be supplied by the evaluator or the implementation being
						tested, as long as it is known. <h:p/>
						The evaluator shall test the decrypt functionality using a
						set of 10 key, ciphertext, tag, AAD, and IV 5-tuples for each
						combination of parameter lengths above and obtain a Pass/Fail
						result on authentication and the decrypted plaintext if Pass. The
						set shall include five tuples that Pass and five that Fail.<h:p/>
						The results from each test may either be obtained by the
						evaluator directly or by supplying the inputs to the implementer
						and receiving the results in response. To determine correctness,
						the evaluator shall compare the resulting values to those obtained
						by submitting the same inputs to a known good
						implementation.<h:p/>
						<h:b>AES-XTS Tests</h:b><h:p/>
						The evaluator shall test the encrypt functionality of XTS-AES for each combination
						of the following input parameter lengths:<h:p/>
						256 bit (for AES-128) and 512 bit (for AES-256) keys<h:p/>
						Three data unit (i.e., plaintext) lengths. One of the data unit lengths shall be a
						non-zero integer multiple of 128 bits, if supported. One of the data unit lengths
						shall be an integer multiple of 128 bits, if supported. The third data unit length
						shall be either the longest supported data unit length or 216 bits, whichever is
						smaller.<h:p/>
						Using a set of 100 (key, plaintext and 128-bit random tweak value) 3-tuples and
						obtain the ciphertext that results from XTS-AES encrypt.<h:p/>
						The evaluator may supply a data unit sequence number instead of the tweak value if
						the implementation supports it. The data unit sequence number is a base-10 number
						ranging between 0 and 255 that implementations convert to a tweak value internally.<h:p/>
						The evaluator shall test the decrypt functionality of XTS-AES using the same test as
						for encrypt, replacing plaintext values with ciphertext values and XTS-AES encrypt
						with XTS-AES decrypt.<h:p/>
						<h:b>AES-CCM Tests</h:b>
						It is not recommended that evaluators use values obtained from static sources such as
						http://csrc.nist.gov/groups/STM/cavp/documents/mac/ccmtestvectors.zip or use values not generated expressly
						to exercise the AES-CCM implementation.<h:p/>
						The evaluator shall test the generation-encryption and decryption-verification functionality of AES-CCM for
						the following input parameter and tag lengths:<h:ul>
							<h:li>Keys: All supported and selected key sizes (e.g., 128, 256 bits).</h:li>
							<h:li>Associated Data: Two or three values for associated data length: The minimum (≥ 0 bytes) and 
								maximum (≤ 32 bytes) supported associated data lengths, and 2^16 (65536) bytes, if supported.</h:li>
							<h:li>Payload: Two values for payload length: The minimum (≥ 0 bytes) and maximum (≤ 32 bytes) supported 
								payload lengths.</h:li>
							<h:li>Nonces: All supported nonce lengths (7, 8, 9, 10, 11, 12, 13) in bytes.</h:li>
							<h:li>Tag: All supported tag lengths (4, 6, 8, 10, 12, 14, 16) in bytes.</h:li>
						</h:ul>
						The testing for CCM consists of five tests. To determine correctness in each of the below tests, the evaluator
						shall compare the ciphertext with the result of encryption of the same inputs with a known good implementation.<h:p/>
						<h:b>Variable Associated Data Test</h:b><h:p/>
						For each supported key size and associated data length, and any supported payload length, nonce length, and tag 
						length, the evaluator shall supply one key value, one nonce value, and 10 pairs of associated data and payload 
						values, and obtain the resulting ciphertext.<h:p/>
						<h:b>Variable Payload Test</h:b><h:p/>
						For each supported key size and payload length, and any supported associated data length, nonce length, and tag 
						length, the evaluator shall supply one key value, one nonce value, and 10 pairs of associated data and payload 
						values, and obtain the resulting ciphertext.<h:p/>
						<h:b>Variable Nonce Test</h:b><h:p/>
						For each supported key size and nonce length, and any supported associated data length, payload length, and tag 
						length, the evaluator shall supply one key value, one nonce value, and 10 pairs of associated data and payload
						values, and obtain the resulting ciphertext.<h:p/>
						<h:b>Variable Tag Test</h:b><h:p/>
						For each supported key size and tag length, and any supported associated data length, payload length, and nonce 
						length, the evaluator shall supply one key value, one nonce value, and 10 pairs of associated data and payload 
						values, and obtain the resulting ciphertext.<h:p/>
						<h:b>Decryption-Verification Process Test</h:b><h:p/>
						To test the decryption-verification functionality of AES-CCM, for each combination of supported associated data
						length, payload length, nonce length, and tag length, the evaluator shall supply a key value and 15 sets of input 
						plus ciphertext, and obtain the decrypted payload. Ten of the 15 input sets supplied should fail verification and
						five should pass.<h:p/>
						<h:b>AES-CTR Tests</h:b><h:p/>
						<h:b><h:i>Test 1: Known Answer Tests (KATs)</h:i></h:b><h:p/>
						There are four Known Answer Tests (KATs) described below. For all KATs, the plaintext, IV, and ciphertext values 
						shall be 128-bit blocks. The results from each test may either be obtained by the validator directly or by
						supplying the inputs to the implementer and receiving the results in response. To determine correctness, the 
						evaluator shall compare the resulting values to those obtained by submitting the same inputs to a known good
						implementation.<h:p/>
						To test the encrypt functionality, the evaluator shall supply a set of 10 plaintext values and obtain the
						ciphertext value that results from encryption of the given plaintext using a key value of all zeros and an IV of
						all zeros. Five plaintext values shall be encrypted with a 128-bit all zeros key, and the other five shall be 
						encrypted with a 256-bit all zeros key. To test the decrypt functionality, the evaluator shall perform the same 
						test as for encrypt, using 10 ciphertext values as input.<h:p/>
						To test the encrypt functionality, the evaluator shall supply a set of 10 key values and obtain the ciphertext 
						value that results from encryption of an all zeros plaintext using the given key value and an IV of all zeros.
						Five of the key values shall be 128-bit keys, and the other five shall be 256-bit keys. To test the decrypt 
						functionality, the evaluator shall perform the same test as for encrypt, using an all zero ciphertext value as 
						input.<h:p/>
						To test the encrypt functionality, the evaluator shall supply the two sets of key values described below and 
						obtain the ciphertext values that result from AES encryption of an all zeros plaintext using the given key values
						an an IV of all zeros. The first set of keys shall have 128 128-bit keys, and the second shall have 256 256-bit 
						keys. Key_i in each set shall have the leftmost i bits be ones and the rightmost N-i bits be zeros, for i
						in [1, N]. To test the decrypt functionality, the evaluator shall supply the two sets of key and ciphertext
						value pairs described below and obtain the plaintext value that results from decryption of the given ciphertext
						using the given key values and an IV of all zeros. The first set of key/ciphertext pairs shall have 128 128-bit
						key/ciphertext pairs, and the second set of key/ciphertext pairs shall have 256 256-bit pairs. Key_i in each
						set shall have the leftmost i bits be ones and the rightmost N-i bits be zeros for i in [1, N]. The ciphertext
						value in each pair shall be the value that results in an all zeros plaintext when decrypted with its corresponding
						key.<h:p/>
						To test the encrypt functionality, the evaluator shall supply the set of 128 plaintext values described below and 
						obtain the two ciphertext values that result from encryption of the given plaintext using a 128-bit key value of 
						all zeros and using a 256 bit key value of all zeros, respectively, and an IV of all zeros. Plaintext value i in
						each set shall have the leftmost bits be ones and the rightmost 128-i bits be zeros, for i in [1, 128]. To test
						the decrypt functionality, the evaluator shall perform the same test as for encrypt, using ciphertext values of
						the same form as the plaintext in the encrypt test as input.<h:p/>
						<h:b><h:i>Test 2: Multi-Block Message Test</h:i></h:b><h:p/>
						The evaluator shall test the encrypt functionality by encrypting an i-block message where 1 less-than i 
						less-than-or-equal to 10. For each i the evaluator shall choose a key, IV, and plaintext message of length i 
						blocks and encrypt the message, using the mode to be tested, with the chosen key. The ciphertext shall be compared 
						to the result of encrypting the same plaintext message with the same key and IV using a known good implementation.
						The evaluator shall also test the decrypt functionality by decrypting an i-block message where 1 less-than i 
						less-than-or-equal to 10. For each i the evaluator shall choose a key and a ciphertext message of length i blocks 
						and decrypt the message, using the mode to be tested, with the chosen key. The plaintext shall be compared to the
						result of decrypting the same ciphertext message with the same key using a known good implementation.<h:p/>
						<h:b><h:i>Test 3: Monte-Carlo Test</h:i></h:b><h:p/>
						For AES-CTR mode perform the Monte Carlo Test for ECB Mode on the encryption engine of the counter mode
						implementation. There is no need to test the decryption engine.<h:p/>
						The evaluator shall test the encrypt functionality using 200 plaintext/key pairs. 100 of these shall use 128 bit 
						keys, and 100 of these shall use 256 bit keys. The plaintext values shall be 128-bit blocks. For each pair, 
						1000 iterations shall be run as follows:<h:p/>
						<h:code>
							For AES-ECB mode
							   # Input: PT, Key              
							   for i = 1 to 1000:
								  CT[i] = AES-ECB-Encrypt(Key, PT)
								  PT = CT[i]
						</h:code><h:p/>
						The ciphertext computed in the 1000th iteration is the result for that trial. This result shall be compared to
						the result of running 1000 iterations with the same values using a known good implementation.<h:p/>
					</Tests>
				</aactivity>
			</f-element>
        </f-component> 
		
	    <!-- FCS_COP.1/Hash (former;y FCS_COP.1/2) -->
        <f-component cc-id="fcs_cop.1" id="fcom_hash" iteration="Hash" name="Cryptographic Operation - Hashing" status="sel-based">
			<depends on="sel_all_tls"/>
			<f-element id="fel-crypt-hash">
				<title>
					The <h:b>application</h:b> shall perform <h:i>cryptographic hashing</h:i> services in accordance with a specified 
					cryptographic algorithm 
					<selectables linebreak="yes">
						<selectable>SHA-1</selectable>
						<selectable>SHA-256</selectable>
						<selectable>SHA-384</selectable>
						<selectable>SHA-512</selectable>
					</selectables>
					and message digest sizes <selectables linebreak="yes">
						<selectable>160</selectable>
						<selectable>256</selectable>
						<selectable>384</selectable>
						<selectable>512</selectable>
					</selectables> bits that meet the following: FIPS Pub 180-4.
				</title>
				<note role="application">
					This is dependent on implementing cryptographic functionality, as in FTP_DIT_EXT.1.<h:p/>
					Per NIST SP 800-131A, SHA-1 for generating digital signatures is no
					longer allowed, and SHA-1 for verification of digital signatures is strongly discouraged as
					there may be risk in accepting these signatures.<h:p/>
					SHA-1 is currently included in order to comply with the TLS. If
					the TLS package is included in the ST, the hashing algorithms selection for FCS_COP.1/Hash
					must match the hashing algorithms used in the mandatory and selected cipher suites of
					the TLS package. Vendors are strongly encouraged to implement updated protocols that
					support the SHA-2 family; until updated protocols are supported, this PP allows support for
					SHA-1 implementations in compliance with SP 800-131A.<h:p/>
					The intent of this requirement is to specify the hashing function. The hash selection must
					support the message digest size selection. The hash selection should be consistent with the
					overall strength of the algorithm used (for example, SHA 256 for 128-bit keys).
				</note>
				<aactivity>
					<TSS>
						The evaluator shall check that the association of the hash function with other
						application cryptographic functions (for example, the digital signature verification
						function) is documented in the TSS.<h:p/>
					</TSS>
					<Guidance>None.<h:p/></Guidance>
					<Tests>
						The TSF hashing functions can be implemented in one of two 
						modes. The first mode is the byte-oriented mode. In this mode the TSF 
						hashes only messages that are an integral number of bytes in length; i.e., the length 
						(in bits) of the message to be hashed is divisible by 8. The second mode is the 
						bit-oriented mode. In this mode the TSF hashes messages of arbitrary 
						length. As there are different tests for each mode, an indication is given in the 
						following sections for the bit-oriented vs. the byte-oriented test MACs. The evaluator 
						shall perform all of the following tests for each hash algorithm implemented by the 
						TSF and used to satisfy the requirements of this PP.<h:p/>     
						The following tests require the developer to provide access to a test application
						that provides the evaluator with tools that are typically not found in the production application.
						<testlist>
							<test>Short Messages Test - Bit oriented Mode. The evaluators devise an input set
								consisting of m+1 messages, where m is the block length of the hash algorithm. The
								length of the messages range sequentially from 0 to m bits. The message text shall
								be pseudorandomly generated. The evaluators compute the message digest for each of
								the messages and ensure that the correct result is produced when the messages are
								provided to the TSF. </test>
							<test>Short Messages Test - Byte oriented Mode. The evaluators devise an input set
								consisting of m/8+1 messages, where m is the block length of the hash algorithm.
								The length of the messages range sequentially from 0 to m/8 bytes, with each
								message being an integral number of bytes. The message text shall be
								pseudorandomly generated. The evaluators compute the message digest for each of
								the messages and ensure that the correct result is produced when the messages are
								provided to the TSF. </test>
							<test>Selected Long Messages Test - Bit oriented Mode. The evaluators devise an input
								set consisting of m messages, where m is the block length of the hash algorithm.
								The length of the ith message is 512 + 99*i, where 1 ≤ i ≤ m. The message text
								shall be pseudorandomly generated. The evaluators compute the message digest for
								each of the messages and ensure that the correct result is produced when the
								messages are provided to the TSF. </test>
							<test>Selected Long Messages Test - Byte oriented Mode. The evaluators devise an
								input set consisting of m/8 messages, where m is the block length of the hash
								algorithm. The length of the ith message is 512 + 8*99*i, where 1 ≤ i ≤ m/8. The
								message text shall be pseudorandomly generated. The evaluators compute the message
								digest for each of the messages and ensure that the correct result is produced
								when the messages are provided to the TSF. </test>
							<test>Pseudorandomly Generated Messages Test. This test is for byte-oriented
								implementations only. The evaluators randomly generate a seed that is n bits long,
								where n is the length of the message digest produced by the hash function to be
								tested. The evaluators then formulate a set of 100 messages and associated digests
								by following the algorithm provided in Figure 1 of [SHAVS]. The evaluators then
								ensure that the correct result is produced when the messages are provided to the
								TSF. </test>
						</testlist>
					</Tests>
				</aactivity>
			</f-element>
        </f-component> 
	      
	      
	    <!-- FCS_COP.1/KeyedHash (formerly FCS_COP.1/4) -->
        <f-component cc-id="fcs_cop.1" id="fcom_key_hash" iteration="KeyedHash" name="Cryptographic Operation - Keyed-Hash Message Authentication" status="sel-based">
			<depends on="sel_all_tls"/>
			<f-element id="fel-keyed-hash">
				<title>The <h:b>application</h:b> shall perform <h:i>keyed-hash message authentication</h:i> in accordance with a 
					specified cryptographic algorithm<h:ul>
						<h:li>HMAC-SHA-256</h:li></h:ul>and
					<selectables linebreak="yes">
						<selectable>HMAC-SHA-1</selectable>
						<selectable>HMAC-SHA-384</selectable>
						<selectable>HMAC-SHA-512</selectable>
					</selectables> with key sizes <assignable>key size (in bits) used in HMAC</assignable> 
					and message digest sizes 256 and <selectables>
						<selectable>160</selectable>
						<selectable>384</selectable>
						<selectable>512</selectable>
					</selectables>
					bits that meet the following: FIPS Pub 198-1 <h:i>The Keyed-Hash Message Authentication Code</h:i>
					and FIPS Pub 180-4 <h:i>Secure Hash Standard</h:i>.
				</title>
				<note role="application">
					This is dependent on implementing cryptographic functionality, as in FTP_DIT_EXT.1.<h:p/>
					The intent of this requirement is to specify the keyed-hash
					message authentication function used for key
					establishment purposes for the various cryptographic protocols
					used by the application (e.g., trusted channel). The hash selection must
					support the message digest size selection. The hash selection
					should be consistent with the overall strength of the algorithm used for FCS_COP.1/SKC.
				</note>
				<aactivity>
					The evaluator shall perform the following activities based on the selections in the ST.
					<TSS>None.<h:p/></TSS>
					<Guidance>None.<h:p/></Guidance>
					<Tests>
						For each of the supported parameter sets, the evaluator shall compose 15 sets of test data.
						Each set shall consist of a key and message data.  The evaluator shall have the TSF generate
						HMAC tags for these sets of test data.  The resulting MAC tags shall be compared to the 
						result of generating HMAC tags with the same key and IV using a known-good implementation.
					</Tests>
				</aactivity>
			</f-element>
        </f-component> 

	    <!-- FCS_COP.1/Sig (formerly FCS_COP.1/3) -->
        <f-component cc-id="fcs_cop.1" id="fcom_sign" iteration="Sig" name="Cryptographic Operation - Signing"  status="sel-based">
			<depends on="sel_all_tls"/>
			<f-element id="fel-sign">
				<title>
					The <h:b>application</h:b> shall perform <h:i>cryptographic signature services (generation and
					verification)</h:i> in accordance with a specified cryptographic algorithm <selectables linebreak="yes">
						<selectable><h:b>RSA schemes</h:b> using cryptographic key sizes of 2048-bit or greater that meet the 
							following: FIPS PUB 186-4, “Digital Signature Standard (DSS)”, Section 4</selectable>
						<selectable><h:b>ECDSA schemes</h:b> using “NIST curves” P-256, P-384 and <selectables>
							<selectable>P-521</selectable>
							</selectables>
						that meet the following: FIPS PUB 186-4, “Digital Signature Standard (DSS)”, Section 5</selectable>
					</selectables>.
				</title>
				<note role="application">
					This is dependent on implementing cryptographic functionality, as in FTP_DIT_EXT.1.<h:p/>
					The ST Author should choose the algorithm implemented to perform
					digital signatures; if more than one algorithm is available, this requirement should be iterated
					to specify the functionality. For the algorithm chosen, the ST author should make the
					appropriate assignments/selections to specify the parameters that are implemented for that
					algorithm.
				</note>
				<aactivity>
					The evaluator shall perform the following activities based on the selections in the ST.
					<TSS>None.<h:p/></TSS>
					<Guidance>None.<h:p/></Guidance>
					<Tests>
						The following tests require the developer to provide access to a test application
						that provides the evaluator with tools that are typically not found in the production
						application. <h:p/>
						ECDSA Algorithm Tests
						<testlist>
							<test>ECDSA FIPS 186-4 Signature Generation Test. For each
								supported NIST curve (i.e., P-256, P-384 and P-521) and SHA function pair, the
								evaluator shall generate 10 1024-bit long messages and obtain for each message a
								public key and the resulting signature values R and S. To determine correctness,
								the evaluator shall use the signature verification function of a known good
								implementation. 
							</test>
							<test>
								ECDSA FIPS 186-4 Signature Verification Test. For each supported
								NIST curve (i.e., P-256, P-384 and P-521) and SHA function pair, the evaluator
								shall generate a set of 10 1024-bit message, public key and signature tuples and
								modify one of the values (message, public key or signature) in five of the 10
								tuples. The evaluator shall obtain in response a set of 10 PASS/FAIL values.
							</test>
						</testlist>
						RSA Signature Algorithm Tests
						<testlist>
							<test>Signature Generation Test. The evaluator shall
								verify the implementation of RSA Signature Generation by the TOE
								using the Signature Generation Test. To conduct this test the evaluator must 
								generate or obtain 10 messages from a trusted reference implementation for each 
								modulus size/SHA combination supported by the TSF. The evaluator 
								shall have the TOE use their private key and modulus value to 
								sign these messages. The evaluator shall verify the correctness of the 
								TSF’s signature using a known good implementation and the 
								associated public keys to verify the signatures.
							</test>
							<test>Signature Verification Test. The 
								evaluator shall perform the Signature Verification test to verify the ability of 
								the TOE to recognize another party’s valid and invalid 
								signatures. The evaluator shall inject errors into the test vectors produced 
								during the Signature Verification Test by introducing errors in some of the public 
								keys, e, messages, IR format, and/or signatures. The TOE attempts 
								to verify the signatures and returns success or failure.
							</test>
						</testlist>
					</Tests>
				</aactivity>
			</f-element>
        </f-component>
		
		
		<!-- FCS_HTTPS_EXT.1/Client -->
		<!-- Added by TD0601 -->
        <f-component cc-id="fcs_https_ext.1" name="HTTPS Protocol" iteration="Client" status="sel-based">
			<depends on-se1="sel_all_https_cl"/>
			<f-element id="fel-https-wath-cl">
				<title>
					The application shall implement the HTTPS protocol that complies with RFC 2818.
				</title>
				<aactivity level="element">
					<TSS>
						The evaluator shall examine the TSS and determine that enough detail is provided to
						explain how the implementation complies with RFC 2818.<h:p/>
					</TSS>
					<Guidance>
						None.<h:p/>
					</Guidance>
					<Tests>
						The evaluator shall attempt to establish an HTTPS connection with a webserver, 
						observe the traffic with a packet analyzer, and verify that the connection succeeds 
						and that the traffic is identified as TLS or HTTPS.
					</Tests>
				</aactivity>
			</f-element>
			<f-element id="fel-https-how-cl">
				<title>The application shall implement HTTPS using TLS as defined in the Functional Package for TLS.</title>
				<aactivity level="element">
					<TSS>None<h:p/></TSS>
					<Guidance>None.<h:p/></Guidance>
					<Tests>Other tests are performed in conjunction with the TLS package.</Tests>
				</aactivity>
			</f-element>
			<f-element id="fel-https-who-cl">
				<title> The application shall 
					<selectables onlyone="yes">
						<selectable>not establish the application-initiated connection</selectable>
						<selectable>notify the user and not establish the user-initiated connection</selectable>
						<selectable>notify the user and request authorization to establish the user-initiated connection</selectable>
					</selectables>
					if the peer certificate is deemed invalid.
				</title>    
				<note role="application">
					Validity is determined by the certificate path, the expiration date, and the 
					revocation status in accordance with RFC 5280. 
				</note>
				<aactivity level="element">
					<TSS>None<h:p/></TSS>
					<Guidance>None.<h:p/></Guidance>
					<Tests>
						Certificate validity shall be tested in accordance with testing performed for 
						FIA_X509_EXT.1, and the evaluator shall perform the following test:
						<testlist>
							<test>
							The evaluator shall demonstrate that using a certificate without a valid 
							certification path results in the selected action in the SFR. If "notify the user" 
							is selected in the SFR, then the evaluator shall also determine that the user
							is notified of the certificate validation failure. Using the administrative
							guidance, the evaluator shall then load a certificate or certificates to the 
							Trust Anchor Database needed to validate the certificate to be used in the
							function, and demonstrate that the function succeeds. The evaluator then shall
							delete one of the certificates, and show that again, using a certificate
							without a valid certification path results in the selected action in the SFR,
							and if "notify the user" was selected in the SFR, the user is notified of the 
							validation failure.
							</test>
						</testlist>
					</Tests>
				</aactivity>
			</f-element>
        </f-component>

		<!-- FCS_HTTPS_EXT.1/Server -->
		<!-- Added by TD0601 -->
        <f-component cc-id="fcs_https_ext.1" name="HTTPS Protocol" iteration="Server" status="sel-based">
			<depends on1="sel_all_https_sv"/>
			<depends on1="sel_all_https_ma"/>
			<f-element id="fel-https-wath-sv">
				<title>
					The application shall implement the HTTPS protocol that complies with RFC 2818.
				</title>
				<aactivity level="element">
					<TSS>
						The evaluator shall examine the TSS and determine that enough detail is provided to
						explain how the implementation complies with RFC 2818.<h:p/>
					</TSS>
					<Guidance>
						None.<h:p/>
					</Guidance>
					<Tests>
						The evaluator shall attempt to establish an HTTPS connection to the TOE using a 
						client, observe the traffic with a packet analyzer, and verify that the connection
						succeeds and that the traffic is identified as TLS or HTTPS.
					</Tests>
				</aactivity>
			</f-element>
			<f-element id="fel-https-how-sv">
				<title>The application shall implement HTTPS using TLS as defined in the Functional Package for TLS.</title>
				<aactivity level="element">
					<TSS>None<h:p/></TSS>
					<Guidance>None.<h:p/></Guidance>
					<Tests>Other tests are performed in conjunction with the TLS package.</Tests>
				</aactivity>
			</f-element>
        </f-component>

		<!-- FCS_HTTPS_EXT.2 HTTPS Protocol with Mutual Authentication -->
		<!-- Added by TD0601 -->
        <f-component cc-id="fcs_https_ext.2" name="HTTPS Protocol with Mutual Authentication" status="sel-based">
			<depends on1="sel_all_https_ma"/>
			<f-element id="fel-https-wath-m">
				<title>
					The application shall 
					<selectables onlyone="yes">
						<selectable>not establish the connection</selectable>
						<selectable>establish or not establish the connection based on an administrative or user setting</selectable>
					</selectables>if the peer certificate is deemed invalid.
				</title>
				<note role="application">
					 Validity is determined by the certificate path, the expiration date, and the 
					 revocation status in accordance with RFC 5280.
				</note>
				<aactivity level="element">
					<TSS>None.<h:p/></TSS>
					<Guidance>None.<h:p/></Guidance>
					<Tests>
						Certificate validity shall be tested in accordance with testing performed for 
						FIA_X509_EXT.1, and the evaluator shall perform the following test:
						<testlist>
							<test> The evaluator shall demonstrate that using a certificate without a 
							valid certification path results in the selected action in the SFR. Using the 
							administrative guidance, the evaluator shall then load a certificate or 
							certificates to the Trust Anchor Database needed to validate the certificate 
							to be used in the function, and demonstrate that the function succeeds. The
							evaluator then shall delete one of the certificates, and show that again,
							using a certificate without a valid certification path results in the selected 
							action in the SFR.</test>
						</testlist>
					</Tests>
				</aactivity>
			</f-element>
        </f-component>
		
		<!-- FCS_RBG_EXT.1  -->
		<!-- TD416 incorporated -->
		<!-- TD510 incorporated -->
        <f-component cc-id="fcs_rbg_ext.1" name="Random Bit Generation Services">
			<f-element id="fel-rbg">
				<title> The application shall
					<selectables linebreak="yes">
						<selectable exclusive="yes">use no DRBG functionality</selectable>
					</selectables> for its cryptographic operations. 
				</title>
				<note role="application"> The selection "<h:i>invoke platform-provided DRBG functionality</h:i>"
					should only be chosen for direct invocations of the platform DRBG, calls to platform protocols
					that may then call the platform's DRBG are not directly using DRBG functionality  and should
					select "<h:i>use no DRBG functionality</h:i>." <h:p/> 
					If "<h:i>implement DRBG functionality</h:i>" is chosen, then additional FCS_RBG_EXT.2
					elements shall be included in the ST.<h:p/>
					In this requirement, cryptographic operations include all cryptographic key generation/derivation/agreement, IVs (for
					certain modes), as well as protocol-specific random values. Cryptographic operations in this requirement refer to
					the other cryptographic requirements in this PP, not additional functionality that is not in scope.
				</note>
				<aactivity>
					<TSS>
						If "<h:i>use no DRBG functionality</h:i>" is selected, the evaluator shall inspect the application 
						and its developer documentation and verify that the application needs no random bit generation services. 
						<h:p/>
						If "<h:i>implement DRBG functionality</h:i>" is selected, the evaluator shall ensure
						that additional FCS_RBG_EXT.2 elements are included in the ST.
						<h:p/>
						If "<h:i>invoke platform-provided DRBG functionality</h:i>" is selected, the evaluator 
						performs the following activities.  The evaluator shall examine 
						the TSS to confirm that it identifies all functions (as described by the
						SFRs included in the ST) that obtain random numbers from the platform RBG.  The evaluator 
						shall determine that for each of these functions, the TSS states which 
						platform interface (API) is used to obtain the random numbers.  The evaluator shall confirm 
						that each of these interfaces corresponds to the acceptable interfaces listed for each platform 
						below.  <h:p/>
						It should be noted that there is no expectation that the evaluators attempt to confirm 
						that the APIs are being used correctly for the functions identified in the TSS; 
						the activity is to list the used APIs and then do an existence check via decompilation.
						<h:p/>
					</TSS>
					<Guidance>None.<h:p/></Guidance>
					<Tests>
						If "<h:i>invoke platform-provided DRBG functionality</h:i>" is selected, the following tests shall be performed: <h:p/>
						The evaluator shall decompile the application binary using a decompiler 
						suitable for the application (TOE).  The evaluator shall search the output of the 
						decompiler to determine that, for each API listed in the TSS, that API 
						appears in the output.  If the representation of the API does not correspond directly to 
						the strings in the following list, the evaluator shall provide a mapping from the 
						decompiled text to its corresponding API, with a description of why the API text does 
						not directly correspond to the decompiled text and justification that the decompiled text 
						corresponds to the associated API. <h:p/>
						The following are the per-platform list of acceptable APIs:
						<h:div><depends ref="android"/> 
							The evaluator shall verify that the application uses at least one of <h:code>javax.crypto.KeyGenerator</h:code> 
							class or the <h:code>java.security.SecureRandom</h:code> class or <h:code>/dev/random
							</h:code> or <h:code>/dev/urandom</h:code>.
						</h:div>
						<h:div><depends ref="windows"/>
							The evaluator shall verify that rand_s, RtlGenRandom, BCryptGenRandom, or 
							CryptGenRandom API is used for classic desktop applications. The evaluator shall 
							verify the application uses the RNGCryptoServiceProvider class or derives a class 
							from System.Security.Cryptography.RandomNumberGenerator API for Windows Universal
							Applications. It is only required that the API is called/invoked, there is no 
							requirement that the API be used directly. In future versions of this document, 
							CryptGenRandom may be removed as an option as it is no longer the preferred API per
							vendor documentation. </h:div>
						<h:div><depends ref="ios"/> 
							The evaluator shall verify that the application invokes either
							<h:code>SecRandomCopyBytes</h:code>, <h:code>CCRandomGenerateBytes</h:code>, or <h:code>CCRandomCopyBytes</h:code>, or uses <h:code>/dev/random</h:code> directly to acquire random.
						</h:div>
						<h:div><depends ref="linux"/> 
							The evaluator shall verify that the application collects random from <h:code>/dev/random</h:code>
							or <h:code>/dev/urandom</h:code>.
						</h:div>
						<h:div><depends ref="Solaris"/>
							The evaluator shall verify that the application collects random from <h:code>/dev/random</h:code>.
						</h:div>
						<h:div><depends ref="mac"/>
							The evaluator shall verify that the application invokes either <h:code>CCRandomGenerateBytes</h:code> or <h:code>CCRandomCopyBytes</h:code>, or collects random from <h:code>/dev/random</h:code>.
						</h:div>
						<h:p/>If invocation of platform-provided functionality is achieved in another way, the evaluator 
						shall ensure the TSS describes how this is carried out, and how it is equivalent to the 
						methods listed here (e.g. higher-level API invokes identical low-level API).
					</Tests>
				</aactivity>
			</f-element>
        </f-component>
	      
		<!-- FCS_RBG_EXT.2 -->
        <f-component cc-id="fcs_rbg_ext.2" name="Random Bit Generation from Application" status="sel-based">
			<depends on="drbg"/>
			<f-element id="fel-drbg-how">
				<title> The application shall perform all deterministic random bit generation (DRBG)
					services in accordance with NIST Special Publication 800-90A using <selectables>
						<selectable>Hash_DRBG (any)</selectable>
						<selectable>HMAC_DRBG (any)</selectable>
						<selectable>CTR_DRBG (AES)</selectable>
					</selectables>
				</title>
				<note role="application">This requirement shall be included in STs in which 
					"<h:i>implement DRBG functionality</h:i>" is chosen in FCS_RBG_EXT.1.1. 
					The ST author should select the standard to which the RBG services comply (either SP 800-90A or FIPS 
					140-2 Annex C). <h:p/>
					SP 800-90A contains three different methods of generating random numbers; each of 
					these, in turn, depends on underlying cryptographic primitives 
					(hash functions/ciphers). The ST author will select the function used (if SP 800-90A 
					is selected), and include the specific underlying cryptographic primitives used in the 
					requirement or in the TSS. While any of the identified hash functions (SHA-1, SHA-224, 
					SHA-256, SHA-384, SHA-512) are allowed for Hash_DRBG or HMAC_DRBG, only AES-based 
					implementations for CTR_DRBG are allowed.
				</note>
				<aactivity level="element">
					<TSS>None.<h:p/></TSS>
					<Guidance>None.<h:p/></Guidance>
					<Tests>
						The evaluator shall perform the following tests, depending on the standard
						to which the RBG conforms. <h:p/>
						Implementations Conforming to FIPS 140-2 Annex C. <h:p/>
						The reference for the tests contained in this section is The Random Number Generator
						Validation System (RNGVS). The evaluators shall conduct the following two tests. Note 
						that the "expected values" are produced by a reference implementation of the algorithm 
						that is known to be correct. Proof of correctness is left to each Scheme.
						<testlist>
							<test>
								The evaluators shall perform a Variable Seed Test. The evaluators shall
								provide a set of 128 (Seed, DT) pairs to the TSF RBG function, 
								each 128 bits. The evaluators shall also provide a key (of the length appropriate 
								to the AES algorithm) that is constant for all 128 (Seed, DT) pairs. The DT value 
								is incremented by 1 for each set. The seed values shall have no repeats within
								the set. The evaluators ensure that the values returned by the 
								TSF match the expected values.
							</test>
							<test>
								The evaluators shall perform a Monte Carlo Test. For this test, they supply
								an initial Seed and DT value to the TSF RBG function; each of 
								these is 128 bits. The evaluators shall also provide a key (of the length 
								appropriate to the AES algorithm) that is constant throughout the test. The 
								evaluators then invoke the TSF RBG 10,000 times, with the DT 
								value being incremented by 1 on each iteration, and the new seed for the 
								subsequent iteration produced as specified in NIST-Recommended Random Number 
								Generator Based on ANSI X9.31 Appendix A.2.4 Using the 3-Key Triple DES and AES 
								Algorithms, Section E.3. The evaluators ensure that the 10,000th value produced 
								matches the expected value.
							</test>
						</testlist>
						Implementations Conforming to NIST Special Publication 800-90A
						<testlist>
							<test>
								The evaluator shall perform 15 trials for the RNG implementation. If the RNG is
								configurable, the evaluator shall perform 15 trials for each configuration. The
								evaluator shall also confirm that the operational guidance contains appropriate
								instructions for configuring the RNG functionality. <h:p/>
								If the RNG has prediction resistance enabled, each trial consists of (1) 
								instantiate DRBG, (2) generate the first block of random bits (3) generate a 
								second block of random bits (4) uninstantiate. The evaluator verifies that the 
								second block of random bits is the expected value. The evaluator shall generate 
								eight input values for each trial. The first is a count (0 – 14). The next three 
								are entropy input, nonce, and personalization string for the instantiate 
								operation. The next two are additional input and entropy input for the first call 
								to generate. The final two are additional input and entropy input for the second
								call to generate. These values are randomly generated. “generate one block of 
								random bits” means to generate random bits with number of returned bits equal to 
								the Output Block Length (as defined in NIST SP 800-90A). <h:p/>
								If the RNG does not have prediction resistance, each trial consists of (1) 
								instantiate DRBG, (2) generate the first block of random bits (3) reseed, (4) 
								generate a second block of random bits (5) uninstantiate. The evaluator verifies 
								that the second block of random bits is the expected value. The evaluator shall 
								generate eight input values for each trial. The first is a count (0 – 14). The 
								next three are entropy input, nonce, and personalization string for the 
								instantiate operation. The fifth value is additional input to the first call to
								generate. The sixth and seventh are additional input and entropy input to the call 
								to reseed. The final value is additional input to the second generate call. <h:p/>
								The following paragraphs contain more information on some of the input values to 
								be generated/selected by the evaluator. <h:p/>
								<h:b>Entropy input:</h:b> the length of the entropy input value must equal the seed length.<h:p/>
								<h:b>Nonce:</h:b> If a nonce is supported (CTR_DRBG with no Derivation Function does not use 
								a nonce), the nonce bit length is one-half the seed length. 
								<h:p/>
								<h:b>Personalization string:</h:b> The length of the personalization string must be 
								less then or equal to seed length. If the implementation only supports one 
								personalization string length, then the same length can be used for both values. 
								If more than one string length is support, the evaluator shall use personalization 
								strings of two different lengths. If the implementation does not use a 
								personalization string, no value needs to be supplied. <h:p/>
								<h:b>Additional input:</h:b> the additional input bit lengths have the same defaults 
								and restrictions as the personalization string lengths.
							</test>   
						</testlist>
					</Tests>
				</aactivity>
			</f-element>
			<f-element id="fel-drbg-seed">
				<title>
					The deterministic RBG shall be seeded by an entropy source that accumulates
					entropy from a platform-based DRBG and <selectables linebreak="yes">
						<selectable>a software-based noise source</selectable>
						<selectable>a hardware-based noise source</selectable>
					</selectables> with a minimum of <selectables linebreak="yes" onlyone="yes">
						<selectable>128 bits</selectable>
						<selectable>256 bits</selectable>
					</selectables> of entropy at least equal to the greatest security strength (according
					to NIST SP 800-57) of the keys and hashes that it will generate. 
				</title>
				<note role="application">This requirement shall be included in STs in which 
					"<h:i>implement DRBG functionality</h:i>" is chosen in FCS_RBG_EXT.1.1. For the first
					selection in this requirement, the ST author selects "<h:i>software-based noise source</h:i>" if 
					any additional noise sources are used as input to the application's DRBG. Note that 
					the application must use the platform's DRBG to seed its DRBG. <h:p/>
					In the second selection in this requirement, the ST author selects the 
					appropriate number of bits of entropy that corresponds to the greatest security 
					strength of the algorithms included in the ST. Security strength is defined in Tables 
					2 and 3 of NIST SP 800-57A. For example, if the implementation includes 2048-bit RSA 
					(security strength of 112 bits) and AES 256 (security strength 256 bits),
					then the ST author would select 256 bits.
				</note>
				<aactivity level="element">
					<TSS>
						Documentation shall be produced - and the evaluator shall perform the
						activities - in accordance with <xref to="entropyappendix"/> and the
						<h:a href="https://www.niap-ccevs.org/Documents_and_Guidance/ccevs/Entropy%20Documentation%20and%20Assessment%20Clarification.pdf">
						Clarification to the Entropy Documentation and Assessment Annex</h:a>.<h:p/>
					</TSS>
					<Guidance>None.<h:p/></Guidance>
					<Tests> 
						In the future, specific statistical testing (in line with NIST SP 800-90B) will 
						be required to verify the entropy estimates.
					</Tests>
				</aactivity>
			</f-element>
        </f-component>
		
		<!-- FCS_STO_EXT.1 Storage of Credential -->
        <f-component cc-id="fcs_sto_ext.1" name="Storage of Credentials">
			<f-element id="fel-store-creds">
				<title>The application shall 
					<selectables linebreak="yes">
						<selectable>invoke the functionality provided by the platform to securely store 
							<assignable>list of credentials</assignable>
						</selectable>
						<selectable id="sel_impl_sto">implement functionality to securely store
							<assignable>list of credentials</assignable>
							according to
							<selectables>
								<selectable id="sel-fcs-sto-skc">FCS_COP.1/SKC</selectable>
								<selectable id="sel-fcs-sto-pbkdf">FCS_CKM.1/PBKDF</selectable>
							</selectables>
						</selectable>
					</selectables>
					to non-volatile memory.
				</title>
				<note role="application">
					This requirement ensures that persistent credentials (secret keys, PKI private keys, passwords, etc) 
					are stored securely, and never persisted in cleartext form. 
					Application developers are encouraged to use platform mechanisms for the secure storage of credentials. 
					Depending on the platform that may include hardware-backed protection for credential storage. Application
					developers must choose a selection, or multiple selections, based on all credentials that the application
					stores. If "<h:i>not store any credentials</h:i>" is selected then the application must not store any credentials.
					If "<h:i>invoke the functionality provided by the platform to securely store</h:i>" is selected then the 
					Application developer must closely review the EA for their platform and provide documentation indicating
					which platform mechanisms are used to store credentials. 
					If "<h:i>implement functionality to securely store credentials</h:i>" is selected, then the following components 
					must be included in the ST: FCS_COP.1/SKC or FCS_CKM.1/PBKDF.
					If other cryptographic operations are used to implement the secure storage of credentials, the corresponding 
					requirements must be included in the ST. If the OS is Linux and Java KeyStores are used to store 
					credentials, "<h:i>implement functionality to securely store credentials</h:i>" must be selected.
				</note>           
				<aactivity>
					<TSS>The evaluator shall check the TSS to ensure that it lists all persistent 
						credentials (secret keys, PKI private keys, or passwords) needed to meet the 
						requirements in the ST. For each of these items, the evaluator shall 
						confirm that the TSS lists for what purpose it is used, and how it is stored. <h:p/>
					</TSS>              
					<Guidance>None.<h:p/></Guidance>
					<Tests>
						For all credentials for which the application implements functionality, the evaluator shall 
						verify credentials are encrypted according to FCS_COP.1/SKC or conditioned according to
						FCS_CKM.1.1/AK and FCS_CKM.1/PBKDF.
						For all credentials for which the application invokes platform-provided
						functionality, the evaluator shall perform the following actions which vary per platform.
						<h:div><depends ref="android"/>The evaluator shall verify that the application uses
							the Android <h:code>KeyStore</h:code> or the Android <h:code>KeyChain</h:code> to store certificates.  
						</h:div>
						<h:div><depends ref="windows"/>The evaluator shall verify that all certificates are
							stored in the Windows Certificate Store. The evaluator shall verify that other
							credentials, like passwords, are stored in the Windows Credential Manager or stored 
							using the Data Protection API (DPAPI). For Windows Universal Applications, the evaluator shall 
							verify that the application is using the ProtectData class and storing credentials 
							in IsolatedStorage.
						</h:div>
						<h:div><depends ref="ios"/>
							The evaluator shall verify that all credentials are stored
							within a <h:code>Keychain</h:code>.  
						</h:div>
						<h:div><depends ref="linux"/>
							The evaluator shall verify that all keys are stored using Linux keyrings.
						</h:div>
						<h:div><depends ref="Solaris"/>
							The evaluator shall verify that all keys are stored using Solaris 
							<h:code>Key Management Framework (KMF)</h:code>.
						</h:div>
						<h:div><depends ref="mac"/>The evaluator shall verify that all credentials are 
							stored within <h:code>Keychain</h:code>.</h:div>
					</Tests>
				</aactivity>
			</f-element>
        </f-component>
		
		
    </section>    <!-- 5.1.1 Cryptographic Support (FCS) -->

	<!-- 5.1.2 User Data Protection (FDP) -->
    <section title="User Data Protection (FDP)" id="fdp">
	  
		<!-- FDR_DEC_EXT.1 -->
		<!-- Incorporates TD434 -->
		<!-- Incorporates TD515 -->
        <f-component cc-id="fdp_dec_ext.1" name="Access to Platform Resources">
			<f-element id="fel-hardware-access">
				<title> The application shall restrict its access to
					<selectables linebreak="yes">
						<selectable>network connectivity</selectable>
						<selectable>camera</selectable>
						<selectable>microphone</selectable>
						<selectable>location services</selectable>
						<selectable>NFC</selectable>
						<selectable>USB</selectable>
						<selectable>Bluetooth</selectable>
						<selectable><assignable>list of additional hardware resources</assignable></selectable>
					</selectables>.
				</title>
				<note role="application">
					The intent is for the evaluator to ensure that the selection captures all
					hardware resources which the application accesses, and that these are 
					restricted to those which are justified.
					On some platforms, the application must explicitly solicit permission 
					in order to access hardware resources.
					Seeking such permissions, even if the application does not later make use of the
					hardware resource, should still be considered access.
					Selections should be expressed in a manner consistent with how the application expresses
					its access needs to the underlying platform.  For example,
					the platform may provide location services which implies the potential use of a variety
					of hardware resources (e.g. satellite receivers, WiFi, cellular radio)
					yet "<h:i>location services</h:i>" is the proper selection.  This is because use of these resources
					can be inferred, but also because the actual usage may vary based on the particular platform.
					Resources that do not need to be explicitly identified are
					those which are ordinarily used by any application such as central processing units,
					main memory, displays, input devices (e.g. keyboards, mice), and
					persistent storage devices provided by the platform.
				</note>
				<aactivity level="element">
					<TSS>None.<h:br/></TSS>
					<Guidance>The evaluator shall perform the platform-specific actions below and inspect user
						documentation to determine the application's access to hardware
						resources.  The evaluator shall ensure that this is consistent with the selections
						indicated.  The evaluator shall review documentation provided by the application
						developer and for each resource which it accesses, identify the
						justification as to why access is required.<h:br/>
					</Guidance>
					<Tests>
						<h:div><depends ref="android"/>
							The evaluator shall verify that each <h:code>uses-permission</h:code> entry in the AndroidManifest.xml file 
							for access to a hardware resource is reflected in the selection.
						</h:div>
						<h:div><depends ref="windows"/>For Windows Universal Applications the evaluator shall check 
							the WMAppManifest.xml file for a list of required hardware capabilities. The evaluator
							shall verify that the user is made aware of the required hardware capabilities when
							the application is first installed. This includes permissions such as
							ID_CAP_ISV_CAMERA, ID_CAP_LOCATION, ID_CAP_NETWORKING, ID_CAP_MICROPHONE,
							ID_CAP_PROXIMITY and so on.
							A complete list of Windows App permissions can be found at: 
							<h:ul><h:li>
								<h:a href="http://msdn.microsoft.com/en-US/library/windows/apps/jj206936.aspx">
								http://msdn.microsoft.com/en-US/library/windows/apps/jj206936.aspx</h:a>
							</h:li></h:ul>
							For Windows Desktop Applications the evaluator shall identify in either the
							application software or its documentation the list of the required
							hardware resources. 
						</h:div>
						<h:div><depends ref="ios"/>The evaluator shall verify that either the
							application or the documentation provides a list of the
							hardware resources it accesses. </h:div>
						<h:div><depends ref="linux"/> The evaluator shall verify that either the
							application software or its documentation provides a list of the
							hardware resources it accesses. </h:div>
						<h:div><depends ref="Solaris"/> The evaluator shall verify that either the
							application software or its documentation provides a list of the
							hardware resources it accesses. </h:div>
						<h:div><depends ref="mac"/> The evaluator shall verify that either the application
							software or its documentation provides a list of the hardware
							resources it accesses.</h:div>
					</Tests>
				</aactivity>
			</f-element>
			<f-element id="fel-info-access">
				<title>The application shall restrict its access to
				<selectables linebreak="yes">
				  <selectable>address book</selectable>
						<selectable>calendar</selectable>
						<selectable>call lists</selectable>
						<selectable>system logs</selectable>
						<selectable><assignable>list of additional sensitive information repositories</assignable></selectable>
					</selectables>.
				</title>
				<note role="application"> 
					"<h:i>Sensitive information repositories</h:i>" are defined as those collections of sensitive data that 
					could be expected to be shared among some applications, users, or user roles, but to which not all
					of these would ordinarily require access.
				</note>
				<aactivity level="element">
					<TSS>None.<h:br/></TSS>
					<Guidance>The evaluator shall perform the platform-specific actions below and inspect user
						documentation to determine the application's access to sensitive information
						repositories.  The evaluator shall ensure that this is consistent with the selections
						indicated.  The evaluator shall review documentation provided by the application
						developer and for each sensitive information repository which it accesses, identify the
						justification as to why access is required.<h:br/>
					</Guidance>
					<Tests>
	                    <h:div><depends ref="android"/>
							The evaluator shall verify that each <h:code>uses-permission</h:code> entry in the AndroidManifest.xml file 
							for access to a sensitive information repository is reflected in the selection.  
						</h:div>
						<h:div><depends ref="windows"/>For Windows Universal Applications the evaluator shall check the
							WMAppManifest.xml file for a list of required capabilities. The evaluator shall
							identify the required information repositories when the
							application is first installed. This includes permissions such as
							ID_CAP_CONTACTS,ID_CAP_APPOINTMENTS,ID_CAP_MEDIALIB and so on. A complete list of
							Windows App permissions can be found at: 
							<h:ul><h:li>
								<h:a href="http://msdn.microsoft.com/en-US/library/windows/apps/jj206936.aspx">
									http://msdn.microsoft.com/en-US/library/windows/apps/jj206936.aspx</h:a>
							</h:li></h:ul>
							For Windows Desktop Applications the evaluator shall identify in either the
							application software or its documentation the list of 
							sensitive information repositories it accesses. 
						</h:div>
						<h:div><depends ref="ios"/>The evaluator shall verify that either the application
							software or its documentation provides a list of
							the sensitive information repositories it accesses.</h:div>
						<h:div><depends ref="linux"/> The evaluator shall verify that either the 
							application software or its documentation provides a list of 
							sensitive information repositories it accesses.
						</h:div>
						<h:div><depends ref="Solaris"/>The evaluator shall verify that either the
							application software or its documentation provides a list of
							sensitive information repositories it accesses. </h:div>
						<h:div><depends ref="mac"/>The evaluator shall verify that either the application
							software or its documentation provides a list of
							sensitive information repositories it accesses.</h:div>
					</Tests>
				</aactivity>
			</f-element>
        </f-component>

        <f-component cc-id="fdp_net_ext.1" name="Network Communications">
			<f-element id="fel-network-access">
				<title>The application shall restrict network communication to 
					<selectables linebreak="yes">
						<selectable>user-initiated communication for 
							<assignable>list of functions 
							for which the user can initiate network communication</assignable></selectable>
						<selectable>respond to <assignable>list of remotely initiated communication </assignable></selectable>
						<selectable><assignable>list of application-initiated network communication</assignable></selectable>
					</selectables>. 
				</title>
				<note role="application">
					This requirement is intended to restrict both inbound and
					outbound network communications to only those required, or to network
					communications that are user initiated.
					It does not apply to network communications in which the application may generically 
					access the filesystem which may result in the platform accessing remotely mounted
					drives/shares.
				</note>
				<aactivity>
					<TSS>None.<h:p/></TSS>
					<Guidance>None.<h:p/></Guidance>
					<Tests>The evaluator shall perform the following tests:
						<testlist>
							<test>
								The evaluator shall run the application.  While the application is running,
								the evaluator shall sniff network traffic ignoring all non-application 
								associated traffic
								and verify that any network communications witnessed are documented in the TSS or are user-initiated. 
							</test>
							<test>
								The evaluator shall run the application.  After the application initializes, the
								evaluator shall run network port scans to verify that any ports
								opened by the application have been captured in the ST for the third
								selection and its assignment.  This includes
								connection-based protocols (e.g. TCP, DCCP) as well as connectionless protocols
								(e.g. UDP).
							</test>
						</testlist>
						<h:div><depends ref="android"/>
							If "no network communication" is selected, the evaluator shall ensure that the application's
							AndroidManifest.xml file does not contain a uses-permission or uses-permission-sdk-23 tag
							containing android:name="android.permission.INTERNET".
							In this case,
							it is not necessary to perform the above Tests 1 and 2, as the platform will not allow the
							application to perform any network communication.
						</h:div>
					</Tests>
				</aactivity>
			</f-element>	
		</f-component>

		<!-- FDP_DAR_EXT.1 Encryption of Sensitive Application Data -->
		<!-- incorporates TD582 -->
        <f-component cc-id="fdp_dar_ext.1" name="Encryption Of Sensitive Application Data">
			<f-element id="fel-dar-how">
				<title>
					The application shall 
					<selectables linebreak="yes">
						<selectable>leverage platform-provided functionality to encrypt sensitive data</selectable>
						<selectable>implement functionality to encrypt sensitive data as defined in the PP-Module for File Encryption</selectable>
						<selectable>protect sensitive data in accordance with FCS_STO_EXT.1</selectable>
					</selectables> in non-volatile memory.
				</title>
				<note role="application">
					If "<h:i>implement functionality to encrypt sensitive data as defined in the PP-Module for File Encryption</h:i>"
					is selected, the TSF must claim conformance to a PP-Configuration that includes the File Encryption PP-Module. 
					<h:p/>
					Any file that may potentially contain sensitive data (to include temporary files)
					shall be protected.  The only exception is if the user intentionally exports the sensitive data
					to non-protected files. ST authors should select "<h:i>protect sensitive data in accordance with 
					FCS_STO_EXT.1</h:i>" for the sensitive data that is covered by the FCS_STO_EXT.1 SFR.
				</note>
				<aactivity>
					<TSS>
						The evaluator shall examine the TSS to ensure that it describes the sensitive data processed by the application. 
						The evaluator shall then ensure that the following activities cover all of the sensitive data identified in the TSS.
						<h:p/>
						If <h:b>not store any sensitive data</h:b> is selected, the evaluator shall inspect the TSS to ensure 
						that it describes how sensitive data cannot be written to non-volatile memory. The evaluator shall also 
						ensure that this is consistent with the filesystem test below.<h:p/>
					</TSS>
					<Guidance>None.<h:p/></Guidance>
					<Tests>
						Evaluation activities (after the identification of the sensitive data) are to be performed on all sensitive data listed 
						that are not covered by FCS_STO_EXT.1. <h:p/>
						The evaluator shall inventory the filesystem locations where the application may write data. 
						The evaluator shall run the application and attempt to store sensitive data. The evaluator shall 
						then inspect those areas of the filesystem to note where data was stored (if any), and determine 
						whether it has been encrypted.<h:p/>
						If "<h:i>leverage platform-provided functionality</h:i>" is selected, the evaluation activities will be performed as 
						stated in the following requirements, which vary on a per-platform basis.<h:p/>
			            <h:div><depends ref="android"/>
							The evaluator shall inspect the TSS and verify that it describes how files containing sensitive data are 
							stored with the <h:code>MODE_PRIVATE</h:code> flag set.
						</h:div>
						<h:div><depends ref="windows"/>
							The Windows platform currently does not provide data-at-rest
							encryption services which depend upon invocation by application developers. The evaluator shall
							verify that the Operational User Guidance makes the need to activate platform encryption, 
							such as BitLocker or Encrypting File System (EFS), clear to the end user.
						</h:div>
						<h:div><depends ref="ios"/>
							The evaluator shall inspect the TSS and ensure that it describes how the 
							application uses the Complete Protection, Protected Unless Open, or Protected Until 
							First User Authentication Data Protection Class for each data file stored locally. 
						</h:div>
						<h:div><depends ref="linux"/>
							The Linux platform currently does not provide data-at-rest encryption services which depend
							upon invocation by application developers.  The evaluator shall verify that
							the Operational User Guidance makes the need to activate platform encryption clear 
							to the end user.
						</h:div>
						<h:div><depends ref="Solaris"/>
							The Solaris platform currently does not provide data-at-rest encryption services which depend
							upon invocation by application developers.  The evaluator shall verify that
							the Operational User Guidance makes the need to activate platform encryption clear 
							to the end user.
						</h:div>
						<h:div><depends ref="mac"/>
							The macOS platform currently does not provide data-at-rest encryption services which depend
							upon invocation by application developers.  The evaluator shall verify that
							the Operational User Guidance makes the need to activate platform encryption clear
							to the end user.
						</h:div>
					</Tests>
				</aactivity>
			</f-element>
        </f-component>
    </section>   <!-- FDP -->
	    
	<!-- Identification and Authentication (FIA) -->
    <section title="Identification and Authentication (FIA)" id="fia">
	
		<!-- FIA_X509_EXT.1 -->
		<!-- Modified by TD495 -->
		<!-- Modified by TD601 -->
        <f-component cc-id="fia_x509_ext.1" name="X.509 Certificate Validation" status="sel-based">
			<depends on1="sel_all_https_cl" on2="sel_all_https_sv" on3="sel_all_https_ma" on4="sel_all_tls" on5="sel_all_dtls"/>
			<f-element id="fel-certauth-how">
				<title>
					The application shall 
					<selectables onlyone="yes">
						<selectable>invoke platform-provided functionality</selectable>
						<selectable>implement functionality</selectable>
					</selectables>
					to validate certificates in accordance with the following rules:<h:ul>
						<h:li>RFC 5280 certificate validation and certificate path validation.</h:li>
						<h:li>The certificate path must terminate with a trusted CA certificate.</h:li>
						<h:li>The application shall validate a certificate path by ensuring the presence of the 
							basicConstraints extension and that the CA flag is set to TRUE for all CA 
							certificates, and that any path constraints are met.
						</h:li>
						<h:li>The application shall validate that any CA certificate includes caSigning purpose in the key
							usage field</h:li>
						<h:li>The application shall validate the revocation status of the certificate using 
							<selectables>
								<selectable>OCSP as specified in RFC 6960</selectable>
								<selectable>CRL as specified in RFC 5280 Section 6.3</selectable>
								<selectable>CRL as specified in RFC 8603</selectable>
								<selectable>an OCSP TLS Status Request Extension (OCSP stapling) as specified in RFC 6066</selectable>
								<selectable>OCSP TLS Multi-Certificate Status Request Extension (i.e., OCSP Multi-Stapling) as specified in RFC 6961</selectable>
							</selectables>.
						</h:li>
						<h:li>The application shall validate the extendedKeyUsage (EKU) field according to the 
							following rules:<h:ul>
							<h:li>Certificates used for trusted updates and executable code integrity verification 
								shall have the Code Signing Purpose (id-kp 3 with OID 1.3.6.1.5.5.7.3.3) in the 
								extendedKeyUsage field.
							</h:li>
							<h:li>Server certificates presented for TLS shall have the Server Authentication
								purpose (id-kp 1 with OID 1.3.6.1.5.5.7.3.1) in the EKU field.
							</h:li>
							<h:li>
								Client certificates presented for TLS shall have the Client Authentication purpose 
								(id-kp 2 with OID 1.3.6.1.5.5.7.3.2) in the EKU field.
							</h:li>
							<h:li>
								S/MIME certificates presented for email encryption and signature shall have the 
								Email Protection purpose (id-kp 4 with OID 1.3.6.1.5.5.7.3.4) in the EKU field.
							</h:li>
							<h:li>
								OCSP certificates presented for OCSP responses shall have the OCSP Signing purpose 
								(id-kp 9 with OID 1.3.6.1.5.5.7.3.9) in the EKU field.
							</h:li>
							<h:li>
								Server certificates presented for EST shall have the CMC Registration Authority 
								(RA) purpose (id-kp-cmcRA with OID 1.3.6.1.5.5.7.3.28) in the EKU field.
							</h:li></h:ul>
						</h:li>
					</h:ul>
				</title>
				<note role="application">
					FIA_X509_EXT.1.1 lists the rules for validating certificates. The ST author shall select whether
					revocation status is verified using OCSP or CRLs. FIA_X509_EXT.2 requires that certificates are
					used for HTTPS, TLS, and DTLS; this use requires that the extendedKeyUsage rules are verified.
					If OCSP is not supported the EKU provision for checking the OCSP Signing purpose is met by 
					default.<h:p/>
					This requirement is included if the protocol(s) selected in FTP_DIT_EXT.1.1 require the use of
					certificates. If the TOE implements TLS as a HTTPS/TLS server with no mutual authentication,
					this requirement is not applicable.<h:p/>
					OCSP stapling and OCSP multi-stapling only support TLS server certificate validation. If other 
					certificate types are validated, either OCSP or CRL should be claimed.<h:p/>
					Regardless of the selection of "<h:i>implement functionality or invoke platform-provided 
					functionality</h:i>," the validation is expected to end in a trusted root CA certificate in a root
					store managed by the platform.
				</note>
				<aactivity level="element">
					<TSS>
						The evaluator shall ensure the TSS describes where the check of validity of the certificates
						takes place. The evaluator ensures the TSS also provides a description of the certificate 
						path validation algorithm.<h:p/>
					</TSS>
					<Guidance>None.<h:p/></Guidance>
					<Tests>
						The tests described must be performed in conjunction with the other certificate services evaluation 
						activities, including the functions in FIA_X509_EXT.2.1. The tests for the extendedKeyUsage rules are 
						performed in conjunction with the uses that require those rules. If the application supports chains of
						length four or greater, the evaluator shall create a chain of at least four certificates: 
						the node certificate to be tested, two Intermediate CAs, and the self-signed Root CA. If 
						the application supports a maximum trust depth of two, then a chain with no Intermediate
						CA should instead be created.
						<testlist>
							<test>
								The evaluator shall demonstrate that validating a certificate without a valid certification path results in the function 
								failing, for each of the following reasons, in turn:<h:ul>
								<h:li>by establishing a certificate path in which one of the issuing certificates is not a CA certificate,</h:li>
								<h:li>by omitting the basicConstraints field in one of the issuing certificates,</h:li>
								<h:li>by setting the basicConstraints field in an issuing certificate to have CA=False,</h:li>
								<h:li>by omitting the CA signing bit of the key usage field in an issuing certificate, and</h:li>
								<h:li>by setting the path length field of a valid CA field to a value strictly less than the certificate path.</h:li>
								</h:ul>
								The evaluator shall then establish a valid certificate path consisting of valid CA certificates, and demonstrate that the 
								function succeeds. The evaluator shall then remove trust in one of the CA certificates, and show that the function fails.
							</test>
							<test>
								The evaluator shall demonstrate that validating an expired certificate results in the function failing.
							</test>
							<test>
								The evaluator shall test that the TOE can properly handle revoked certificates-“conditional on whether
								CRL, OCSP, OCSP Stapling or OCSP Multi-stapling is selected; if multiple methods are selected, then
								the following tests shall be performed for each method:
								<h:ul>
								<h:li>The evaluator shall test revocation of the node certificate.</h:li>
								<h:li>The evaluator shall also test revocation of an intermediate CA certificate (i.e. the intermediate
									CA certificate should be revoked by the root CA), if intermediate CA certificates are supported.
									If OCSP stapling per RFC 6066 is the only supported revocation method, this test is omitted.</h:li>
								<h:li>The evaluator shall ensure that a valid certificate is used, and that the validation function 
									succeeds. The evaluator then attempts the test with a certificate that has been revoked (for each 
									method chosen in the selection) to ensure when the certificate is no longer valid that the 
									validation function fails.</h:li>
								</h:ul>
							</test>
							<test>
								If any OCSP option is selected, the evaluator shall configure the OCSP server or use a
								man-in-the-middle tool to present a certificate that does not have the OCSP signing purpose and verify
								that validation of the OCSP response fails. If CRL is selected, the evaluator shall configure the CA 
								to sign a CRL with a certificate that does not have the cRLsign key usage bit set, and verify that
								validation of the CRL fails.
							</test>
							<test>
								The evaluator shall modify any byte in the first eight bytes of the certificate and demonstrate that 
								the certificate fails to validate. (The certificate will fail to parse correctly.)
							</test>
							<test>
								 The evaluator shall modify any byte in the last byte of the certificate and demonstrate that the 
								 certificate fails to validate. (The signature on the certificate will not validate.)
							</test>
							<test>
								The evaluator shall modify any byte in the public key of the certificate and demonstrate that the
								certificate fails to validate. (The signature on the certificate will not validate.)
							</test>
							<test>
								 (Conditional on support for EC certificates as indicated in FCS_COP.1/Sig). The evaluator shall establish a valid,
								 trusted certificate chain consisting of an EC leaf certificate, an EC Intermediate CA certificate not 
								 designated as a trust anchor, and an EC certificate designated as a trusted anchor, where the elliptic 
								 curve parameters are specified as a named curve. The evaluator shall confirm that the TOE validates 
								 the certificate chain.
							</test>
							<test>
								(Conditional on support for EC certificates as indicated in FCS_COP.1/Sig). The evaluator shall replace
								the intermediate certificate in the certificate chain for Test 9 with a modified certificate, where 
								the modified intermediate CA has a public key information field where the EC parameters uses an 
								explicit format version of the Elliptic Curve parameters in the public key information field of the
								intermediate CA certificate from Test 9, and the modified Intermediate CA certificate is signed by 
								the trusted EC root CA, but having no other changes. The evaluator shall confirm the TOE treats the
								certificate as invalid.
							</test>
						</testlist>
					</Tests>
				</aactivity>
			</f-element>
			<f-element id="fel-ca-who">
				<title>
					The application shall treat a certificate as a CA certificate only if the 
					basicConstraints extension is present and the CA flag is set to TRUE.
				</title>
				<note role="application">
					This requirement applies to certificates that are used and processed by the 
					TSF and restricts the certificates that may be added as trusted CA certificates.
				</note>
				<aactivity level="element">
					<TSS>None.<h:p/></TSS>
					<Guidance>None.<h:p/></Guidance>
					<Tests>
						The tests described must be performed in conjunction with the other certificate 
						services evaluation activities, including the functions in FIA_X509_EXT.2.1.
						If the application supports chains of length four or greater, 
						the evaluator shall create a chain of at least four certificates: the 
						node certificate to be tested, two Intermediate CAs, and the self-signed Root CA.
						If the application supports a maximum trust depth of two, then a chain with
						no Intermediate CA should instead be created.
						<testlist>
							<test>
								The evaluator shall ensure that the certificate of at least one of the CAs in the chain does not contain the 
								basicConstraints extension. The evaluator shall confirm that validation of the certificate path 
								fails (i) as part of the validation of the peer certificate belonging to this chain; and/or 
								(ii) when attempting to add the CA certificate without the basicConstraints extension to the TOE's trust store.
							</test>
							<test>
								The evaluator shall ensure that the certificate of at least one of the CAs in the chain has the CA flag in the 
								basicConstraints extension not set (or set to FALSE). The evaluator shall confirm that validation of the certificate 
								path fails (i) as part of the validation of the peer certificate belonging to this chain; and/or (ii) when attempting 
								to add the CA certificate with the CA flag not set (or set to FALSE) in the basicConstraints extension to the TOE's trust store.
							</test>
						</testlist>
					</Tests>
				</aactivity>
			</f-element>
        </f-component>
	      
	      
		<!-- FIA_X509_EXT.2 X.509 Certificate Authentication -->
		<!-- Incorporates TD601 -->
        <f-component cc-id="fia_x509_ext.2" name="X.509 Certificate Authentication" status="sel-based">
			<depends on1="sel_all_https_cl" on2="sel_all_https_sv" on3="sel_all_https_ma" on4="sel_all_tls" on5="sel_all_dtls"/>
			<f-element id="fel-certs-who">
				<title>
					The application shall use X.509v3 certificates as defined by RFC 5280 to support authentication for 
					<selectables>
						<selectable>HTTPS</selectable>
						<selectable>TLS</selectable>
						<selectable>DTLS</selectable>
						<selectable>SSH</selectable>
						<selectable>IPsec</selectable>
					</selectables>. 
				</title>
				<note role="application">
					This requirement is included if the protocol(s) selected in FTP_DIT_EXT.1.1 require the use of certificates
					to authenticate the remote entity. For example, if the TOE or platform implements TLS as a HTTPS/TLS server
					with no mutual authentication, X509 authentication is not claimed for TLS. If the TOE or platform operates
					as a TLS client, X509 authentication must be claimed.				
				</note>
				<!-- 
				<aactivity>
				  Currently no EAs available.
				</aactivity>
				-->
			</f-element>
			<f-element id="fel-cert-fail">
				<title>
					When the application cannot establish a connection to determine the validity of a 
					certificate, the application shall  
					<selectables onlyone="yes">
						<selectable>allow the administrator to choose whether to accept the certificate in these cases</selectable>
						<selectable>accept the certificate</selectable>
						<selectable>not accept the certificate</selectable>
					</selectables>. 
				</title>
				<note role="application">
					Often a connection must be established to perform a verification of the revocation 
					status of a certificate - either to download a CRL or to perform OCSP. The selection 
					is used to describe the behavior in the event that such a connection cannot be 
					established (for example, due to a network error). If the TOE has 
					determined the certificate valid according to all other rules in FIA_X509_EXT.1,
					the behavior indicated in the selection shall determine the validity. The 
					TOE must not accept the certificate if it fails any of the other 
					validation rules in FIA_X509_EXT.1.
				</note>
				<aactivity>
					<TSS>
						The evaluator shall check the TSS to ensure that it describes how 
						the TOE chooses which certificates to use, and any necessary 
						instructions in the administrative guidance for configuring the operating environment 
						so that the TOE can use the certificates.<h:p/>
						The evaluator shall examine the TSS to confirm that it describes the 
						behavior of the TOE when a connection cannot be established during 
						the validity check of a certificate used in establishing a trusted channel. The 
						evaluator shall verify that any distinctions between trusted channels are described. 
						If the requirement that the administrator is able to specify the default action, then 
						the evaluator shall ensure that the operational guidance contains instructions on how 
						this configuration action is performed.<h:p/>
					</TSS>
					<Guidance>None.<h:p/></Guidance>
					<Tests>
						The evaluator shall perform the following test for each trusted channel:
						<testlist>
							<test>
								The evaluator shall demonstrate that using a valid certificate that requires 
								certificate validation checking to be performed in at least some part by 
								communicating with a non-TOE IT entity. The evaluator shall then 
								manipulate the environment so that the TOE is unable to verify 
								the validity of the certificate, and observe that the action selected in 
								FIA_X509_EXT.2.2 is performed. If the selected action is 
								administrator-configurable, then the evaluator shall follow the operational 
								guidance to determine that all supported administrator-configurable options behave 
								in their documented manner.
							</test>
							<test>
								The evaluator shall demonstrate that an invalid certificate that requires 
								certificate validation checking to be performed in at least some part by 
								communicating with a non-TOE IT entity cannot be accepted. 
							</test>
						</testlist>
					</Tests>
				</aactivity>
			</f-element>
        </f-component>
		
      </section>   <!-- FIA -->
	    
	    
      <section title="Security Management (FMT)" id="fmt">
	  
		<!-- FMT_MEC_EXT.1 -->
		<!-- as replaced in TD437 -->
		<!-- incorporates TD465 -->
		<!-- incorporates TD543 -->
        <f-component cc-id="fmt_mec_ext.1" name="Supported Configuration Mechanism">
			<f-element id="fel-config-store">
				<title>The application shall<selectables>
					<selectable>invoke the mechanisms recommended by the platform vendor for storing and setting configuration options</selectable>
					<selectable>implement functionality to encrypt and store configuration options as defined by FDP_PRT_EXT.1 in the PP-Module for File Encryption</selectable>
					</selectables>
				</title>
				<note role="application"> 
					Configuration options that are stored remotely are not subject to this requirement. 
					Sensitive Data is generally not considered part of configuration options
					and should be stored according to FDP_DAR_EXT.1 or FCS_STO_EXT.1.<h:p/>
					If “<h:i>implement functionality to encrypt and store configuration options as defined by FDP_PRT_EXT.1
					in the PP-Module for File Encryption</h:i>" is selected, the TSF must claim conformance to a 
					PP-Configuration that includes the PP-Module for File Encryption.
				</note>
				<aactivity>
					<TSS>
						The evaluator shall review the TSS to identify the application's configuration options
						(e.g. settings) and determine whether these are stored and set using the mechanisms
						supported by the platform or implemented by the application in accordance with the PP-Module for File Encryption. 
						At a minimum the TSS shall list settings related to any SFRs and any settings that are mandated in the 
						operational guidance in response to an SFR.<h:p/>
						Conditional: If "implement functionality to encrypt and store configuration options as defined by FDP_PRT_EXT.1
						in the PP-Module for File Encryption" is selected, the evaluator shall ensure that the TSS identifies those options, 
						as well as indicates where the encrypted representation of these options is stored.<h:p/>
					</TSS>
					<Guidance>None.<h:p/></Guidance>
					<Tests>
						If "invoke the mechanisms recommended by the platform vendor for storing and setting configuration options" is chosen,
						the method of testing varies per platform as follows: 
	                    <h:div><depends ref="android"/>
							The evaluator shall run the application and make security-related changes to its configuration.
							The evaluator shall check that at least one XML file at location
							<h:span style="path">/data/data/<h:i>package</h:i>/shared_prefs/</h:span>
							reflects the changes made to the configuration to verify that the application used
							<h:code>SharedPreferences</h:code> and/or <h:code>PreferenceActivity</h:code> classes
							for storing configuration data, where <h:i>package</h:i> is the Java package
							of the application.
						</h:div>
						<h:div><depends ref="windows"/>The evaluator shall determine and verify that Windows
							Universal Applications use either the Windows.Storage namespace, Windows.UI.ApplicationSettings namespace,
							or the IsolatedStorageSettings namespace for storing application specific settings.
							For .NET applications, the evaluator shall determine and verify that the application 
							uses one of the locations listed in <h:a href='https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/'>
							https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/</h:a> for storing application specific settings.
							For Classic Desktop applications, the evaluator shall run the application while 
							monitoring it with the SysInternals tool <h:span class="util">ProcMon</h:span> and 
							make changes to its configuration. 
							The evaluator shall verify that <h:span class="util">ProcMon</h:span> logs show corresponding changes to the
							the Windows Registry or C:\ProgramData\ directory.
						</h:div>
						<h:div><depends ref="ios"/>The evaluator shall verify that the app uses the
							<h:code>user defaults system</h:code> or <h:code>key-value store</h:code> for storing all
							settings.</h:div>
						<h:div><depends ref="linux"/> 
							The evaluator shall run the application while monitoring it with the utility <h:span class="util">strace</h:span>.
							The evaluator shall make security-related changes to its configuration.
							The evaluator shall verify that <h:span class="util">strace</h:span> logs corresponding changes to configuration 
							files that reside in /etc (for system-specific configuration), 
							in the user's home directory (for user-specific configuration), or /var/lib/ (for configurations 
							controlled by UI and not intended to be directly modified by an administrator).
						</h:div>
						<h:div><depends ref="Solaris"/>
							The evaluator shall run the application while monitoring it with the utility 
							<h:span class="util">dtrace</h:span>.
							The evaluator shall make security-related changes to its configuration.
							The evaluator shall verify that <h:span class="util">dtrace</h:span> logs corresponding changes to 
							configuration 
							files that reside in /etc (for system-specific configuration) or 
							in the user's home directory(for user-specific configuration).
						</h:div>
						<h:div><depends ref="mac"/>
							The evaluator shall verify that the application stores and retrieves settings
							using the <h:code>NSUserDefaults</h:code> class.
						</h:div>
						If "implement functionality to encrypt and store configuration options as defined by 
						FDP_PRT_EXT.1 in the PP-Module for File Encryption" is selected, for all configuration 
						options listed in the TSS as being stored and protected using encryption, the evaluator 
						shall examine the contents of the configuration option storage (identified in the TSS) to determine 
						that the options have been encrypted.
					</Tests>
				</aactivity>
			</f-element>
        </f-component>
	      
	    <!-- FMT_CFG_EXT.1 Secure by Default Configuration -->
		<!-- Incoporates TD519 -->
        <f-component cc-id="fmt_cfg_ext.1" name="Secure by Default Configuration">
			<f-element id="fel-default-config">
				<title>
					The application shall provide only enough functionality to set new credentials when 
					configured with default credentials or no credentials.
				</title>
				<note role="application">
					Default credentials are credentials (e.g., passwords, keys) that are automatically 
					(without user interaction) loaded onto the platform during application installation.
					Credentials that are generated during installation using requirements laid out in 
					FCS_RBG_EXT.1 are not by definition default credentials.
				</note>
				<aactivity level="element">
					<TSS>
						The evaluator shall check the TSS to determine if the application requires any type
						of credentials and if the application installs with default credentials.<h:br/>
					</TSS>
					<Guidance>None.<h:br/></Guidance>
					<Tests>If the application uses any default credentials the evaluator shall run the following tests.
						<testlist>
							<test>
								The evaluator shall install and run the application without generating or loading 
								new credentials and verify that only the minimal
								application functionality required to set new credentials is available.
							</test>
							<test>
								The evaluator shall attempt to clear all credentials and verify that only
								the minimal application functionality required to set new credentials is available.
							</test>
							<test>
								The evaluator shall run the application, establish new credentials and
								verify that the original default credentials no longer provide access to
								the application.
							</test>
						</testlist>
					</Tests>
				</aactivity>
			</f-element>
			<f-element id="fel-file-perms">
				<title>
					The application shall be configured by default with file permissions which protect
					the application binaries and data files from modification by normal unprivileged users.
				</title>
				<note role="application">
					The precise expectations for file permissions vary per platform
					but the general intention is that a trust boundary protects the application and its data.
				</note>
				<aactivity level="element">
					<TSS>None.<h:br/></TSS>
					<Guidance>None.<h:br/></Guidance>
					<Tests>
						The evaluator shall install and run the application. The evaluator shall
						inspect the filesystem of the platform (to the extent possible) for any files created
						by the application and ensure that their permissions are adequate to protect them.
						The method of doing so varies per platform.
						<h:div><depends ref="android"/>The evaluator shall run the command <h:code>find -L . -perm /002</h:code> 
							inside the application's data directories to ensure that all files are not world-writable. The command 
							should not print any files.
						</h:div>
						<h:div><depends ref="windows"/>The evaluator shall run the SysInternals tools,
							Process Monitor and Access Check (or tools of equivalent capability, like 
							icacls.exe) for Classic Desktop applications to verify that files written to disk 
							during an application's installation have the correct file permissions, such that a 
							standard user cannot modify the application or its data files. For Windows Universal 
							Applications the evaluator shall consider the requirement met because of the AppContainer 
							sandbox.
						</h:div>
						<h:div><depends ref="ios"/>The evaluator shall determine whether the application
							leverages the appropriate Data Protection Class for each data file stored
							locally.</h:div>
						<h:div><depends ref="linux"/> 
							The evaluator shall run the command <h:code>find -L . -perm /002</h:code> 
							inside the application's data directories to ensure that all files are 
							not world-writable. The command should not print any files.
						</h:div>
						<h:div><depends ref="Solaris"/>
							The evaluator shall run the command <h:code>find . \( -perm -002 \)</h:code>
							inside the application's data directories to ensure that all files are not 
							world-writable. The command should not print any files.
						</h:div>
						<h:div><depends ref="mac"/>
							The evaluator shall run the command <h:code>find . -perm +002</h:code> inside
							the application's data directories to ensure that all files are not world-writable.
							The command should not print any files.
						</h:div>
					</Tests>
				</aactivity>
			</f-element>
        </f-component>
	      
	      
        <f-component cc-id="fmt_smf.1" name="Specification of Management Functions">
			<f-element id="fel-management-funcs">
				<title> The TSF shall be capable of performing the following management functions 
					<selectables linebreak="yes">
						<selectable> enable/disable the transmission of any information describing the
							system's hardware, software, or configuration</selectable>
						<selectable> enable/disable the transmission of any PII</selectable>
						<selectable> enable/disable transmission of any application state (e.g. crashdump)
							information</selectable>
						<selectable> enable/disable network backup functionality to <assignable> list of 
							enterprise or commercial cloud backup systems</assignable>
						</selectable>
						<selectable> <assignable> list of other management functions to be provided by
							the TSF</assignable></selectable> 
					</selectables>.
				</title>
				<note role="application">
					This requirement stipulates that an application needs to provide the ability to 
					enable/disable only those functions that it actually implements. The application
					is not responsible for controlling the behavior of the platform or other applications.
				</note>
				<aactivity>
					<TSS>None.<h:p/></TSS>
					<Guidance>
						The evaluator shall verify that every management function 
						mandated by the PP is described in the operational guidance and that the description 
						contains the information required to perform the management duties associated with the 
						management function.<h:p/>
					</Guidance>
					<Tests>
						The evaluator shall test the application's ability to provide the 
						management functions by configuring the application and testing each option selected 
						from above. The evaluator is expected to test these functions in all the ways in which 
						the ST and guidance documentation state the configuration can be managed.
					</Tests>
				</aactivity>
			</f-element>
        </f-component>
    </section>   <!-- FMT -->

    <section title="Privacy (FPR)" id="fpr">
	
		<f-component cc-id="fpr_ano_ext.1" name="User Consent for Transmission of Personally Identifiable Information">
			<f-element id="fel-transmit-pii">
				<title>The application shall 
					<selectables linebreak="yes">
						<selectable exclusive="yes"> require user approval before executing
							<assignable>list of functions that transmit PII over a network</assignable>
						</selectable>
					</selectables>.
				</title>
				<note role="application">
					This requirement applies only to PII that is specifically requested by the application;
					it does not apply if the user volunteers PII without prompting from the application 
					into a general (or inappropriate) data field.
					A dialog box that declares intent to send PII presented to the user 
					at the time the application is started is sufficient to meet this requirement. 
				</note>
				<aactivity>
					<TSS>
						The evaluator shall inspect the TSS documentation to identify functionality in the
						application where PII can be transmitted.<h:p/>
					</TSS>
					<Guidance>None.<h:p/></Guidance>
					<Tests>
					<!--<testlist>
						<test>-->
						If require user approval before executing is selected, the evaluator shall run the application and exercise the functionality responsibly
						for transmitting PII and verify that user approval is required before transmission
						of the PII.
						<!--</test>
						Removing this test for now. 
						<test>
							The evaluator shall sniff network traffic while running the application 
							and verify that no PII is transmitted without user approval.
							If the application communicates over TLS, the evaluator shall use
							man-in-the-middle tools to expose encrypted traffic before sniffing.
						</test>     
					</testlist>-->
					</Tests>
				</aactivity>
			</f-element>
        </f-component>
		
    </section>  <!-- FPR -->

    <section title="Protection of the TSF (FPT)" id="fpt">
	  
        <f-component cc-id="fpt_api_ext.1" name="Use of Supported Services and APIs">
			<f-element id="fel-api-what">
				<title>The application shall use only documented platform APIs.</title>
				<note role="application">
					The definition of "<h:i>documented</h:i>" may vary depending upon whether the application is provided by
					a third party (who relies upon documented platform APIs) or by a platform vendor 
					who may be able to guarantee support for platform APIs.
				</note>
				<aactivity>
					<TSS>The evaluator shall verify that the TSS lists the platform APIs 
						used in the application.<h:p/>
					</TSS>
					<Guidance>None.<h:p/></Guidance>
					<Tests>
						The evaluator shall then compare the list with the supported APIs
						(available through e.g. developer accounts, platform developer groups) and ensure that all 
						APIs listed in the TSS are supported.
					</Tests>
				</aactivity>
			</f-element>
		</f-component>
	      
	      
        <f-component cc-id="fpt_api_ext.2" name="Use of Supported Services and APIs" status="objective">
			<f-element id="fel-api-parsers">
				<title> The application 
					<selectables onlyone="yes">
						<selectable>shall use platform-provided libraries</selectable>
						<selectable>does not implement functionality</selectable>
					</selectables>
					for parsing <assignable> list of formats parsed that are included in the 
					IANA MIME media types</assignable>.
				</title>
				<note role="application">
					The IANA MIME types are listed at
					<h:a href='http://www.iana.org/assignments/media-types'>http://www.iana.org/assignments/media-types</h:a> 
					and include many image, audio, video, and content file formats. <h:p/>
					This requirement does not apply if providing parsing services is the purpose of the 
					application.
				</note>
				<aactivity>
					<TSS>
						The evaluator shall verify that the TSS lists the IANA MIME media types
						(as described by <h:a href='http://www.iana.org/assignments/media-types'>
						http://www.iana.org/assignments/media-types</h:a> )
						for all formats the application processes
						and that it maps those formats to parsing services provided by the platform.
					</TSS>
					<Guidance>None.<h:p/></Guidance>
					<Tests>None.<h:p/></Tests>
				</aactivity>
			</f-element>
        </f-component>
	      
	     
		<!-- FPT_AEX_EXT.1 -->
		<!-- Incorporates TD436 -->
		<!-- Incorporates TD445 -->
		<!-- Incorporates TD544 -->
        <f-component cc-id="fpt_aex_ext.1" name="Anti-Exploitation Capabilities">
			<f-element id="fel-aslr">
				<title> 
					The application shall not request to map memory at an explicit address
					except for <assignable>list of explicit exceptions</assignable>.
				</title>
				<note role="application"> Requesting a memory mapping at an explicit address
					subverts address space layout randomization (ASLR). 
				</note>
				<aactivity level="element"> 
					<TSS>
						The evaluator shall ensure that the TSS describes the compiler flags used to 
						enable ASLR when the application is compiled.<h:br/>
					</TSS>
					<Guidance>None.<h:br/></Guidance>
					<Tests> 
						The evaluator shall perform either a static or dynamic
						analysis to determine that no memory mappings are placed at an explicit and
						consistent address. The method of doing so varies per platform. For those platforms 
						requiring the same application running on two different systems, the evaluator may 
						alternatively use the same device. After collecting the first instance of mappings, 
						the evaluator must uninstall the application, reboot the device, and reinstall the application 
						to collect the second instance of mappings.
						<h:div><depends ref="android"/>
							The evaluator shall run the same application on two
							different Android systems. Both devices do not need to be evaluated, as the second device is acting only as a tool. 
							Connect via ADB and inspect /proc/PID/maps. Ensure the two different instances share no memory mappings made by the 
							application at the same location.
						</h:div>
						<h:div><depends ref="windows"/> 
							The evaluator shall run the same application on two
							different Windows systems and run a tool that will list all memory mapped addresses
							for the application. The evaluator shall then verify the two different instances
							share no mapping locations. The Microsoft SysInternals tool, VMMap, could be used to
							view memory addresses of a running application.  The evaluator shall use a tool
							such as Microsoft's BinScope Binary Analyzer to confirm that the application has
							ASLR enabled.
						</h:div>
						<h:div><depends ref="ios"/>
							The evaluator shall perform a static analysis to search
							for any mmap calls (or API calls that call mmap), and ensure that
							no arguments are provided that request a mapping at a fixed address.
						</h:div>
						<h:div><depends ref="linux"/> 
							The evaluator shall run the same application on two different Linux systems. 
							The evaluator shall then compare their memory maps using 
							<h:code>pmap -x <h:i>PID</h:i> </h:code>
							to ensure the two different instances share no mapping locations.
						</h:div>
						<h:div><depends ref="Solaris"/>
							The evaluator shall run the same application on two different Solaris systems. 
							The evaluator shall then compare their memory maps using 
							<h:code>pmap -x <h:i>PID</h:i> </h:code>
							to ensure the two different instances share no mapping locations.
						</h:div>
						<h:div><depends ref="mac"/>
							The evaluator shall run the same application on two different Mac systems. 
							The evaluator shall then compare their memory maps using 
							<h:code>vmmap <h:i>PID</h:i></h:code>
							to ensure the two different instances share no mapping locations.
						</h:div>
					</Tests>
				</aactivity>
			</f-element>
			<f-element id="fel-nwx">
				<title>
					The application shall 
					<selectables linebreak="yes">
						<selectable exclusive="yes">allocate memory regions with write and execute permissions for only
							<assignable> list of functions performing just-in-time compilation</assignable>
						</selectable>
					</selectables>.
				</title>
				<note role="application"> 
					Requesting a memory mapping with both write and execute permissions subverts the
					platform protection provided by DEP.  If the application performs no just-in-time 
					compiling, then the first selection must be chosen.
				</note>
				<aactivity level="element"> 
					<TSS>None.<h:br/></TSS>
					<Guidance>None.<h:br/></Guidance>
					<Tests>
						The evaluator shall verify that no memory mapping requests are made with write and
						execute permissions. The method of doing so varies per platform.
                        <h:div><depends ref="android"/> 
							The evaluator shall perform static analysis on the application to verify that <h:ul>
								<h:li> mmap is never invoked with both the PROT_WRITE and PROT_EXEC permissions,
									and </h:li>
								<h:li> mprotect is never invoked.</h:li>
							</h:ul> 
						</h:div>
						<h:div><depends ref="windows"/> 
							The evaluator shall use a tool such as Microsoft's 
							BinScope Binary Analyzer to confirm that the application passes the NXCheck. The 
							evaluator may also ensure that the <h:code>/NXCOMPAT</h:code> flag was used during 
							compilation to verify that DEP protections are enabled for the application. 
						</h:div>
						<h:div><depends ref="ios"/> 
							The evaluator shall perform static analysis on the
							application to verify that mprotect is never invoked with the PROT_EXEC permission. 
						</h:div>
						<h:div><depends ref="linux"/> 
							The evaluator shall perform static analysis on the
							application to verify that both <h:ul>
								<h:li> mmap is never be invoked with both the PROT_WRITE and PROT_EXEC permissions,
									and </h:li>
							<h:li> mprotect is never invoked with the PROT_EXEC permission.</h:li>
							</h:ul>  
						</h:div>
						<h:div><depends ref="Solaris"/> 
							The evaluator shall perform static analysis on the
							application to verify that both <h:ul>
								<h:li> mmap is never be invoked with both the PROT_WRITE and PROT_EXEC permissions,
									and </h:li>
								<h:li> mprotect is never invoked with the PROT_EXEC permission.</h:li>
							</h:ul>
						</h:div>
						<h:div><depends ref="mac"/> 
							The evaluator shall perform static analysis on the
							application to verify that mprotect is never invoked with the PROT_EXEC permission.
						</h:div>
					</Tests>
				</aactivity>
			</f-element>
			<f-element id="fel-plays-nice">
				<title>
					The application shall be compatible with security features provided by the
					platform vendor.
				</title>
				<note role="application">
					This requirement is designed to ensure that platform security 
					features do not need to be disabled in order for the application to run.
				</note>
				<aactivity level="element">
					<TSS>None.<h:br/></TSS>
					<Guidance>None.<h:br/></Guidance>
					<Tests>
						The evaluator shall configure the platform in the ascribed manner and 
						carry out one of the prescribed tests:
	                    <h:div><depends ref="android"/>
							Applications running on Android cannot disable Android 
							security features, therefore this requirement is met and no evaluation activity is required.
						</h:div>
						<h:div><depends ref="windows"/>
							If the OS platform supports Windows Defender Exploit Guard 
							(Windows 10 version 1709 or later), then the evaluator shall ensure that the application can 
							run successfully with Windows Defender Exploit Guard Exploit Protection configured with the 
							following minimum mitigations enabled; Control Flow Guard (CFG), Randomize memory allocations 
							(Bottom-Up ASLR), Export address filtering (EAF), Import address filtering (IAF), and
							Data Execution Prevention (DEP). The following link describes how to enable Exploit Protection, 
							https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-exploit-guard/customize-exploit-protection.
							<h:p/>
							If the OS platform supports the Enhanced Mitigation Experience Toolkit (EMET) which can be 
							installed on Windows 10 version 1703 and earlier, then the evaluator shall ensure that 
							the application can run successfully with EMET configured with the following minimum 
							mitigations enabled; Memory Protection Check, Randomize memory allocations (Bottom-Up ASLR), 
							Export address filtering (EAF), and Data Execution Prevention (DEP).
						</h:div>
						<h:div><depends ref="ios"/>
							Applications running on iOS cannot disable
							security features, therefore this requirement is met and no evaluation activity is required.
						</h:div>
						<h:div><depends ref="linux"/> 
							The evaluator shall ensure that the application can
							successfully run on a system with either SELinux or AppArmor enabled and in enforce mode.
						</h:div>
						<h:div><depends ref="Solaris"/>
							The evaluator shall ensure that the application can run with 
							Solaris Trusted Extensions enabled and enforcing.
						</h:div>
						<h:div><depends ref="mac"/> 
							The evaluator shall ensure that the application can
							successfully run on macOS without disabling any security features. 
						</h:div>
					</Tests>
				</aactivity>
			</f-element>
			<f-element id="fel-ro-exe">
				<title>
					The application shall not write user-modifiable files to directories that contain 
					executable files unless explicitly directed by the user to do so.
				</title>
				<note role="application">
					The purpose of this requirement is to help ensure the integrity of application binaries
					by supporting file protection mechanisms such as directory-level file permissions and 
					application whitelisting.<h:p/>
					A user-modifiable file for purposes of this requirement is a file that is writable by
					an unprivileged user of the application -- either directly through application 
					execution or independently of the application. If the application runs in the context 
					of the application user, then the application should not be able to write to the 
					directory containing the application binaries -- regardless of whether the files 
					are configuration data, audit data, or temporary files.<h:p/>
					Executables and user-modifiable files may not share the same parent directory, but
					may share directories above the parent.
				</note>
				<aactivity level="element">
					<TSS>None.<h:br/></TSS>
					<Guidance>None.<h:br/></Guidance>
					<Tests>The evaluator shall run the application and determine where it writes its files.
						For files where the user does not choose the destination, the evaluator shall 
						check whether the destination directory contains executable files.
						This varies per platform: 
	                    <h:div><depends ref="android"/> 
							The evaluator shall run the program, mimicking normal usage, and note where all user-modifiable files are written. 
							The evaluator shall ensure that there are no executable files stored under <h:span style="path">/data/data/<h:i>package</h:i>/</h:span> where <h:i>package</h:i> is the Java package of the application.
						</h:div>
						<h:div><depends ref="windows"/>For Windows Universal Applications the evaluator shall consider
							the requirement met because the platform forces applications to write all data
							within the application working directory (sandbox). For Windows Desktop Applications
							the evaluator shall run the program, mimicking normal usage, and note where all user-modifiable
							files are written. The evaluator shall ensure that there are no executable files
							stored in the same directories to which the application wrote user-modifiable files.</h:div>
						<h:div><depends ref="ios"/>The evaluator shall consider the requirement met because
							the platform forces applications to write all data within the application working
							directory (sandbox).</h:div>
						<h:div><depends ref="linux"/> 
							The evaluator shall run the program, mimicking normal usage, 
							and note where all user-modifiable files are written. 
							The evaluator shall ensure that there are no executable files stored in the 
							same directories to which the application wrote user-modifiable files.
						</h:div>
						<h:div><depends ref="Solaris"/>
							The evaluator shall run the program, mimicking normal usage, 
							and note where all user-modifiable files are written. 
							The evaluator shall ensure that there are no executable files stored in the 
							same directories to which the application wrote user-modifiable files.
						</h:div>
						<h:div><depends ref="mac"/> The evaluator shall run the program, mimicking normal
							usage, and note where all user-modifiable files are written. The evaluator shall ensure that there
							are no executable files stored in the same directories to which the application
							wrote user-modifiable files.
						</h:div>
					</Tests>
				</aactivity>
			</f-element>
			<f-element id="fel-stackcookies">
				<title>The application shall be built with stack-based buffer overflow protection
					enabled.</title>
				<aactivity level="element">
					<TSS>None.<h:br/></TSS>
					<Guidance>None.<h:br/></Guidance>
					<Tests>
						The evaluator will inspect every native executable included in the TOE to ensure that stack-based buffer 
						overflow protection is present.
						<h:div><depends ref="windows"/>Applications that run as Managed Code in the .NET Framework do not require
							these stack protections.
							Applications developed in Object Pascal using the Delphi IDE compiled with RangeChecking enabled 
							comply with this element. For other code, 
							the evaluator shall review the TSS and verify that the /GS flag was used during compilation. The 
							evaluator shall run a tool like, BinScope, that can verify the correct usage of /GS.</h:div>
						<h:div class="subaact"> <h:i><h:b>For PE</h:b></h:i>
							, the evaluator will disassemble each and ensure the following sequence appears:<h:br/>
							<h:table class="code-table">
								<h:tr><h:td>mov rcx, QWORD PTR [rsp+<h:i>(...)</h:i>]</h:td></h:tr>
								<h:tr><h:td>xor rcx, <h:i>(...)</h:i></h:td></h:tr>
								<h:tr><h:td>call <h:i>(...)</h:i></h:td></h:tr>
							</h:table>.
						</h:div>
						<h:div class="subaact"> <h:i><h:b>For ELF executables</h:b></h:i>, the evaluator will ensure that each 
							contains references to the symbol <h:b>__stack_chk_fail</h:b>.
						</h:div>
						<h:br/><h:p>
						Tools such as <h:a href="https://github.com/commoncriteria/canary-detector">Canary Detector</h:a> may help
						automate these activities.
						</h:p>
					</Tests>
				</aactivity>
			</f-element>
        </f-component>
		
		<!-- FPT_IDV_EXT.1 Software Identification and Versions -->
	    <f-component cc-id="fpt_idv_ext.1" name="Software Identification and Versions">
			<f-element id="fel-swid">
				<title>The application shall be versioned with
					<selectables>
						<selectable>SWID tags 
							that comply with minimum requirements from ISO/IEC 19770-2:2015                 
						</selectable>
						<selectable><assignable>other version information</assignable></selectable>
					</selectables>.
				</title>
				<note role="application">The use of SWID tag to identify application software
					is a requirement for DOD IT based on DoD Instruction 8500.01 which requires
					the use of SCAP which includes SWID tags per the NIST standard. The PP selection
					of "other version information" will be removed in the next major release of
					this protection profile. Vendors should begin to version software with valid SWID tags.
					<h:p/>
					Valid SWID tags must contain a SoftwareIdentity element and an Entity element as 
					defined in the ISO/IEC 19770-2:2015 standard. SWID tags must be stored with a .swidtag 
					file extensions as defined in the ISO/IEC 19770-2:2015.
				</note>
				<aactivity>
					<TSS>
						If "other version information" is selected the evaluator shall verify that the 
						TSS contains an explanation of the versioning methodology.<h:p/>
					</TSS>
					<Guidance>None.<h:p/></Guidance>
					<Tests>
						The evaluator shall install the application, then check for the
						existence of version information. If SWID tags is selected the evaluator shall 
						check for a .swidtag file. The evaluator shall open the file and verify that 
						is contains at least a SoftwareIdentity element and an Entity element.
					</Tests>
				</aactivity>
			</f-element>
        </f-component>
   
		<!-- FPT_LIB_EXT.1 Use of Third-Party Libraries -->
        <f-component cc-id="fpt_lib_ext.1" name="Use of Third Party Libraries">
			<f-element id="fel-thirdparty-libs">
				<title> The application shall be packaged with only
					<assignable>list of third-party libraries</assignable>. 
				</title>
				<note role="application"> 
					The intention of this requirement is for the evaluator to discover and document whether the 
					application is including unnecessary or unexpected third-party libraries.  This includes
					adware libraries which could present a privacy threat, as well as ensuring
					documentation of such libraries in case vulnerabilities are later discovered.
				</note>
				<aactivity> 
					<TSS>None.<h:p/></TSS>
					<Guidance>None.<h:p/></Guidance>
					<Tests>
						The evaluator shall install the application and survey its installation directory for 
						dynamic libraries. 
						The evaluator shall verify that libraries found to be packaged with or employed by the 
						application are limited to those in the assignment.
					</Tests>
				</aactivity>
			</f-element>
        </f-component>
	      
	          
		<!-- FPT_TUD_EXT.1 Integrity of Installation and Update -->
		<!-- incorporates TD561 -->
		<!-- incorporates TD548 -->
        <f-component cc-id="fpt_tud_ext.1" name="Integrity for Installation and Update">
			<f-element id="fel-update-check">
				<title>The application shall <selectables>
					<selectable>provide the ability</selectable>
					<selectable>leverage the platform</selectable>
					</selectables> to check for updates and patches to the application software. 
				</title>
				<note role="application">
					This requirement is about the ability to "check" for updates.
					The actual installation of any updates should be done by the platform. This requirement
					is intended to ensure that the application can check for updates provided by the vendor,
					as updates provided by another source may contain malicious code.
				</note>
				<aactivity level="element">
					<TSS>None.<h:br/></TSS>
					<Guidance>
						The evaluator shall check to ensure the guidance includes a description of how updates are
						performed.<h:br/>
					</Guidance>
					<Tests>
						The evaluator shall check for an update using procedures described in either the application documentation 
						or the platform documentation and verify that the application does not issue an error.
						If it is updated or if it reports that no update is available this requirement is considered to be met.<h:br/>
					</Tests>
				</aactivity>
			</f-element>
			<f-element id="fel-version-check">
				<title>The application shall <selectables>
					<selectable>provide the ability</selectable>
					<selectable>leverage the platform</selectable>
					</selectables>
					to query the current version of the application software.
				</title>
				<aactivity level="element">
					<TSS>None.<h:br/></TSS>
					<Guidance> 
						The evaluator shall verify guidance includes a description of how to query the current 
						version of the application.<h:br/>
					</Guidance>
					<Tests> 
						The evaluator shall query the application for the current version of the software
						according to the operational user guidance. The evaluator shall then verify that the 
						current version matches that of the documented and installed version.<h:br/>
					</Tests>
				</aactivity>
			</f-element>
			<f-element id="fel-nomod-exe">
				<title> 
					The application shall not download, modify, replace or update its own binary code. 
				</title>
				<note role="application">
					This requirement applies to the code of the application; it
					does not apply to mobile code technologies that are designed for download and
					execution by the application. 
				</note>
				<aactivity level="element">
					<TSS>None.<h:br/></TSS>
					<Guidance>None.<h:br/></Guidance>
					<Tests>
						The evaluator shall verify that the application's executable files are
						not changed by the application. 
						<h:div><depends ref="ios"/>The evaluator shall consider the requirement met because the platform forces
							applications to write all data within the application working directory (sandbox).
						</h:div>
						<h:br/>For all other platforms, the evaluator shall perform the following test:
						<testlist>
							<test>The evaluator shall install the application and then locate all of its executable files. 
								The evaluator shall then, for each file, save off either a hash of the file or a copy of the file 
								itself. The evaluator shall then run the application and exercise all features of the application as 
								described in the ST. The evaluator shall then compare each executable file with the either the saved 
								hash or the saved copy of the files. The evaluator shall verify that these are identical.
							</test>
						</testlist><h:br/>
					</Tests>
				</aactivity>
			</f-element>
			<f-element id="fel-patch-sign">  <!-- FPT_TUD_EXT.1.4 -->
				<title> 
					Application updates shall be digitally signed such that the application platform can cryptographically verify them prior to installation.
				</title>
				<note role="application">
					The specifics of the verification of updates involves requirements on the platform (and not the
					application), so these are not fully specified here. 
				</note>
				<aactivity level="element">
					<TSS>
						The evaluator shall verify that the TSS identifies how updates to the application  
						are signed by an authorized source. The definition of an
						authorized source must be contained in the TSS.
						The evaluator shall also ensure that the TSS (or the operational
						guidance) describes how candidate updates are obtained.<h:br/>
					</TSS>
					<Guidance>None.<h:br/></Guidance>
					<Tests>None.<h:br/></Tests>
				</aactivity>
			</f-element>
			<f-element id="fel-distro">
				<title> 
					The application is distributed 
					<selectables>
						<selectable id="sel_with_plat">with the platform OS</selectable>
						<selectable id="sel_add_plat">as an additional software package to the platform OS</selectable>
					</selectables>.
				</title>
				<note role="application">
					Application software that is distributed as part of the platform operating system is not 
					required to be package for installation or uninstallation. If "as an additional software
					package to the OS" is selected the requirements from FPT_TUD_EXT.2 
					must be included in the ST.
				</note>
				<aactivity level="element">
					<TSS>
						The evaluator shall verify that the TSS identifies how the application
						is distributed. If "with the platform" is selected the evaluated shall perform
						a clean installation or factory reset to confirm that TOE software is included
						as part of the platform OS. If "as an additional package" is selected the evaluator
						shall perform the tests in FPT_TUD_EXT.2.<h:br/>
					</TSS>
					<Guidance>None.<h:br/></Guidance>
					<Tests>None.</Tests>
				</aactivity>
			</f-element>
        </f-component>
       
		<!-- FPT_TUD_EXT.2 Integrity for Installation and Update -->
		<!-- Incorporates TD548, which reincorporates TD178 from v1.2, back when 
			current FPT_TUD_EXT.2.2 was FPT_TUD_EXT.1.3 -->	  
		<!-- incorporates TD561 (adds FPT_TUD_EXT.2.3) -->
        <f-component cc-id="fpt_tud_ext.2" name="Integrity for Installation and Update" status="sel-based">
			<depends on-sel="sel_add_plat"/>
			<f-element id="fel-patch-native">
				<title>
					The application shall be distributed using the format of the platform-supported
					package manager. 
				</title>
				<aactivity level="element">
					<TSS>None.<h:p/></TSS>
					<Guidance>None.<h:p/></Guidance>
					<Tests>
						The evaluator shall verify that application updates are distributed in the
						format supported by the platform. This varies per platform:               
						<h:div><depends ref="android"/> The evaluator shall ensure that the application is
							packaged in the Android application package (APK) format. </h:div>
						<h:div><depends ref="windows"/> The evaluator shall ensure that the application is
							packaged in the standard Windows Installer (.MSI) format, the Windows Application 
							Software (.EXE) format signed using the Microsoft Authenticode process, or the 
							Windows Universal Application package (.APPX) format. See 
							https://msdn.microsoft.com/en-us/library/ms537364(v=vs.85).aspx for details 
							regarding Authenticode signing.  
						</h:div>
						<h:div><depends ref="ios"/> The evaluator shall ensure that the application is
							packaged in the IPA format. </h:div>
						<h:div><depends ref="linux"/> The evaluator shall ensure that the application is
							packaged in the format of the package management infrastructure of the chosen
							distribution. For example, applications running on Red Hat and Red Hat derivatives
							shall be packaged in <h:code>RPM</h:code> format. Applications running on Debian and Debian
							derivatives shall be packaged in <h:code>DEB</h:code> format. </h:div>
						<h:div><depends ref="Solaris"/> The evaluator shall ensure that the application is
							packaged in the PKG format. </h:div>
						<h:div><depends ref="mac"/> The evaluator shall ensure that application is packaged
							in the DMG format, the PKG format, or the MPKG format. </h:div>
					</Tests>
				</aactivity>
			</f-element>
			<f-element id="fel-removal">
				<title>
					The application shall be packaged such that its removal results in the deletion 
					of all traces of the application, with the exception of configuration settings, output
					files, and audit/log events.
				</title>
				<note role="application">Applications software bundled with the system/firmware image 
					are not subject to this requirement if the user is unable to remove the application through
					means provided by the OS.
				</note>
				<aactivity level="element">
					<TSS>None.<h:p/></TSS>
					<Guidance>None.<h:p/></Guidance>
					<Tests>
						<h:div><depends ref="android"/>The evaluator shall consider the requirement met because 
							the platform forces applications to write all data within the application working 
							directory (sandbox).</h:div>
						<h:div><depends ref="windows"/>
							The evaluator shall install the application and then locate all of its executable files. 
							The evaluator shall then, for each file, save off either a hash of the file or a copy of the
							file itself. The evaluator shall then run the application and exercise all features of
							the application as described in the ST. The evaluator shall then compare each executable
							file with the either the saved hash or the saved copy of the files. The evaluator shall 
							verify that these are identical.</h:div>
						<h:div><depends ref="ios"/>The evaluator shall consider the requirement met because 
							the platform forces applications to write all data within the application working 
							directory (sandbox).</h:div>
						<h:div><depends ref="linux"/>
							The evaluator shall install the application and then locate all of its executable files. 
							The evaluator shall then, for each file, save off either a hash of the file or a copy of the
							file itself. The evaluator shall then run the application and exercise all features of
							the application as described in the ST. The evaluator shall then compare each executable
							file with the either the saved hash or the saved copy of the files. The evaluator shall 
							verify that these are identical.</h:div>
						<h:div><depends ref="Solaris"/>
							The evaluator shall install the application and then locate all of its executable files. 
							The evaluator shall then, for each file, save off either a hash of the file or a copy of the
							file itself. The evaluator shall then run the application and exercise all features of
							the application as described in the ST. The evaluator shall then compare each executable
							file with the either the saved hash or the saved copy of the files. The evaluator shall 
							verify that these are identical.</h:div>
						<h:div><depends ref="mac"/>
							The evaluator shall install the application and then locate all of its executable files. 
							The evaluator shall then, for each file, save off either a hash of the file or a copy of the
							file itself. The evaluator shall then run the application and exercise all features of
							the application as described in the ST. The evaluator shall then compare each executable
							file with the either the saved hash or the saved copy of the files. The evaluator shall 
							verify that these are identical.</h:div>
					</Tests>
				</aactivity>
			</f-element>        
			<f-element id="fel-verify"> <!-- Not sure what to put for the f-element id. 2.3 is added here per TD0561 -->
				<title>
					The application installation package shall be digitally signed such that its platform can 
					cryptographically verify them prior to installation.
				</title>
				<note role="application"> 
					The specifics of the verification of installation packages involves 
					requirements on the platform (and not the application), so these are not fully specified here.
				</note>
				<aactivity level="element">
					<TSS>
						The evaluator shall verify that the TSS identifies how the application installation package 
						is signed by an authorized source. The definition of an authorized source must be contained 
						in the TSS.<h:p/>
					</TSS>
					<Guidance>None.<h:p/></Guidance>
					<Tests>None.</Tests>
				</aactivity>
			</f-element>
        </f-component>
       

    </section>  <!-- FPT -->
	    
	    
    <section title="Trusted Path/Channel (FTP)" id="ftp">
	  
		<!-- FTP_DIT_EXT.1 Protection of Data in Transit -->
		<!-- Modified by TD0609 -->		
        <f-component cc-id="ftp_dit_ext.1" name="Protection of Data in Transit">
			<f-element id="fel-transmit">
				<title>The application shall 
					<selectables linebreak="yes">
						<selectable exclusive="yes">invoke platform-provided functionality to encrypt all transmitted data with
							<selectables>
								<selectable>HTTPS</selectable>
								<selectable>TLS</selectable>
								<selectable>DTLS</selectable>
								<selectable>SSH</selectable>
							</selectables>
						</selectable>	    	    
					</selectables> between itself and another trusted IT product.
				</title>
				<note role="application">
					<!--The X509 requirements are invoked based on the selections in FTP_DIT_EXT.1; if you select a protocol that uses certificates,
					then you must include the SFRs that address the certificates.   
					X509 SFRs shall be included if selections for HTTPS, TLS, or DTLS are included (FCS_HTTPS, FCS_TLSC, FCS_TLSS, FCS_DTLS).
					<h:br/> <h:br/>-->
					Encryption is not required for applications transmitting data that is not sensitive.<h:p/>
					If "<h:i>encrypt all transmitted</h:i>" is selected and "<h:i>TLS</h:i>" is selected, then 
					evaluation of elements from either FCS_TLSC_EXT.1 or FCS_TLSS_EXT.1 is required.<h:p/>
					If "<h:i>encrypt all transmitted</h:i>" is selected, "<h:i>HTTPS</h:i>" is selected, and the 
					TOE acts as a client, then FCS_HTTPS_EXT.1/Client is required.<h:p/> 
					If "<h:i>encrypt all transmitted</h:i>" is selected, "<h:i>HTTPS</h:i>" is selected, and the 
					TOE acts as a server, then FCS_HTTPS_EXT.1/Server is required. <h:p/> 
					<!-- If the TOE acts as a server and if mutual authentication is selected in the TLS Package, 
					then FCS_HTTPS_EXT.2 is also required.  -->
					If the TOE acts as a server and if "<h:i>mutual authentication</h:i>" is selected in the TLS Package,
					then FCS_HTTPS_EXT.2 is also required. <h:p/> 
					If "<h:i>encrypt all transmitted</h:i>" is selected and "<h:i>DTLS</h:i>" is selected, then
					FCS_DTLS_EXT.1 is required.<h:p/>
					If "<h:i>encrypt all transmitted</h:i>" is selected and "<h:i>SSH</h:i>" is selected, then the 
					TSF shall be validated against the  <h:a href="https://www.niap-ccevs.org/Profile/Info.cfm?PPID=459&amp;id=459">
					<h:i>Functional Package for Secure Shell</h:i></h:a>.<h:p/>
					If "<h:i>encrypt all transmitted</h:i>" is selected and "<h:i>IPsec</h:i>" is selected, then the
					TSF must claim conformance to a <h:i>PP-Configuration that includes the
					<h:a href="https://www.niap-ccevs.org/Profile/Info.cfm?PPID=461&amp;id=461">
					VPN Client PP-Module</h:a></h:i><h:p/>
					If "<h:i>encrypt all transmitted</h:i>" is selected the corresponding FCS_COP.1 
					requirements will be included.<h:p/>
					In addition to the above, FIA_X509_EXT.1 and FIA_X509_EXT.2 are required when the following is 
					true:<h:ul>
						<h:li>"<h:i>encrypt all transmitted</h:i>" is selected and the TOE implements a protocol that requires 
							certificates</h:li>
						<h:li>"<h:i>invoke platform-provided functionality to encrypt all transmitted sensitive data</h:i>" is 
							selected and the platform implements a protocol that requires certificates</h:li>
						<h:li>"<h:i>invoke platform-provided functionality to encrypt all transmitted data</h:i>" is selected 
							and the platform implements a protocol that requires certificates</h:li></h:ul>
						<h:b>Note:</h:b>FIA_X509_EXT.1 and FIA_X509_EXT.2 are not applicable when the TOE acts 
						as a HTTPS/TLS server with no mutual authentication.
				</note>  
				<aactivity>
					<TSS>
						For platform-provided functionality, the evaluator shall verify the TSS contains 
						the calls to the platform that TOE is leveraging to invoke the functionality.<h:p/>
					</TSS>
					<Guidance>None.<h:p/></Guidance>
					<Tests>
						The evaluator shall perform the following tests.
						<testlist>
							<test>
								 The evaluator shall exercise the application (attempting to transmit data; for 
								 example by connecting to remote systems or websites) while capturing packets from 
								 the application. The evaluator shall verify from the packet capture that the
								 traffic is encrypted with HTTPS, TLS, DTLS, SSH, or IPsec in accordance with the
								 selection in the ST.
							</test>
							<test>
								The evaluator shall exercise the application (attempting to transmit data; for
								example by connecting to remote systems or websites) while capturing packets from 
								the application. The evaluator shall review the packet capture and verify that no 
								sensitive data is transmitted in the clear.
							</test>
							<test>
								The evaluator shall inspect the TSS to determine if user credentials are transmitted.
								If credentials are transmitted the evaluator shall set the credential to a known
								value. The evaluator shall capture packets from the application while causing
								credentials to be transmitted as described in the TSS. The evaluator shall perform
								a string search of the captured network packets and verify that the plaintext
								credential previously set by the evaluator is not found.
							</test>
						</testlist>
						<h:div><depends ref="android"/>
							If "not transmit any data" is selected, the evaluator shall ensure that the application's 
							AndroidManifest.xml file does not contain a uses-permission or uses-permission-sdk-23 tag 
							containing android:name="android.permission.INTERNET". In this case, it is not necessary to perform 
							the above Tests 1, 2, or 3, as the platform will not allow the application to perform any network 
							communication.
							<!-- TODO: The current wording here adds additional work when "encrypt all transmitted data"
						   is selected. It'd be preferable if we can instead simplify evaluation in that case, to encourage
						   app developers to select it, so this is commented out for now.
						   If "encrypt all transmitted data" is selected, the evaluator
						   shall ensure that the application's manifest declares usesCleartextTraffic="false". It is
						   still necessary to perform the above tests, as this manifest entry is only enforced on
						   a best effort basis by the platform. -->
						</h:div>
						<h:div><depends ref="ios"/>
							If "encrypt all transmitted data" is selected, the evaluator shall ensure that the application's
							Info.plist file does not contain the NSAllowsArbitraryLoads or 
							NSExceptionAllowsInsecureHTTPLoads keys, as these keys disable iOS's Application 
							Transport Security feature.
							<!-- TODO: Check the strength of iOS's App Transport Security enforcement (if apps
							can't easily bypass it, then we can skip performing Tests 1, 2, 3 on iOS when
							App Transport Security isn't explicitly disabled (assuming use of iOS 9 or greater)). -->
						</h:div>
					</Tests>
				</aactivity>
			</f-element>
        </f-component>
		
    </section>   <!-- Trusted Path/Channel (FTP) -->

	<!-- 5.1.7 TOE Security Functional Requirements Rationale -->
	<!-- auto generated -->


    </sec:SFRs>  <!-- 5.1 Security Functional Requirements -->
  </base-pp>
</st>
